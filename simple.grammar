// _prim means primitive
// where is the "end" symbol???
// why are there so many conflicts in this grammar?
//   how can i resolve them?

Syntax Summary
==============

program:
--------
statement*

statement:
----------
identifier prim_expr* :
case integer prim_expr* :
case identifier prim_expr* :
compound_statement
if prim_expr statement
if prim_expr statement else statement
while prim_expr statement
for ( statement ; expr ; statement* ) statement
try compound_statement catch compound_statement
switch prim_expr compound_statement
break
continue
identifier prim_expr*
nonident_prim_expr identifier prim_expr*
nonident_prim_expr = expr
nonident_prim_expr += expr
nonident_prim_expr -= expr
nonident_prim_expr ++
nonident_prim_expr --
;

compound_statement:
-------------------
{ statement* }

expr:
-----
expr && expr
expr || expr
expr & expr
expr | expr
expr ^ expr
expr == expr
expr != expr
expr < expr
expr > expr
expr <= expr
expr >= expr
expr + expr
expr - expr
expr * expr
expr / expr
expr % expr
nonident_prim_expr
func_prim_expr

// These are function calls
//
// e.g. self[local.i] runto $player
//      1.            2.    3.
//      1. nonident_prim_expr 2. identifier 3. prim_expr
// e.g. waitthread craters_cover
//      1.     2.
//      1. identifier prim_expr
// e.g. $mg42_middle1 thread global/mg42_active.scr::mg42
        1.            2.     3:(4.                   5.)
        1. nonident_prim_expr 2. identifier 3. prim_expr
        (4. indentifier 5. prim_expr )
func_prim_expr:
---------------
identifier prim_expr*
nonident_prim_expr identifier prim_expr*
- func_prim_expr
~ func_prim_expr
! func_prim_expr
identifier :: prim_expr
nonident_prim_expr :: prim_expr

// Can be assigned as a value. You can assign these to non_ident_prim_expr
// These are also arguments to functions
prim_expr:
----------
nonident_prim_expr
identifier_prim
prim_expr :: prim_expr                          // array notation

// These can be given a value. You can assign values to these expressions
nonident_prim_expr:
-------------------
$ prim_expr                                     // targetname
nonident_prim_expr . identifier                 // accessor
nonident_prim_expr . size                       // not sure
nonident_prim_expr [ expr ]                     // array accessor
string
integer
float
( number number number )                        // vector
game
level
local
parm
self
group
( expr )
- nonident_prim_expr
~ nonident_prim_expr
! nonident_prim_expr
NULL
NIL

number:
-------
float
integer
