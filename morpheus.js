/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[5,10,15,18,19,20,25,27,28,29,36,51,56,57,59,66,67,68,69,70,71,72,73,74,75,77,78],$V1=[1,6],$V2=[1,8],$V3=[1,9],$V4=[1,10],$V5=[1,21],$V6=[1,11],$V7=[1,12],$V8=[1,13],$V9=[1,14],$Va=[1,17],$Vb=[1,23],$Vc=[1,24],$Vd=[1,25],$Ve=[1,18],$Vf=[1,26],$Vg=[1,27],$Vh=[1,31],$Vi=[1,32],$Vj=[1,33],$Vk=[1,34],$Vl=[1,35],$Vm=[1,36],$Vn=[1,16],$Vo=[1,28],$Vp=[1,38],$Vq=[1,37],$Vr=[9,20,51,56,57,59,66,67,68,69,70,71,72,73,75,77,78],$Vs=[5,10,15,17,18,19,20,21,24,25,27,28,29,36,38,51,56,57,59,66,67,68,69,70,71,72,73,74,75,77,78],$Vt=[1,53],$Vu=[1,54],$Vv=[5,9,10,15,17,18,19,20,21,24,25,27,28,29,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,56,57,58,59,60,61,62,66,67,68,69,70,71,72,73,74,75,77,78],$Vw=[10,15,18,19,20,25,27,28,29,36,38,51,56,57,59,66,67,68,69,70,71,72,73,74,75,77,78],$Vx=[2,49],$Vy=[1,61],$Vz=[1,62],$VA=[1,63],$VB=[1,73],$VC=[5,9,10,15,17,18,19,20,21,24,25,27,28,29,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,56,57,58,59,62,66,67,68,69,70,71,72,73,74,75,77,78],$VD=[1,88],$VE=[1,89],$VF=[1,90],$VG=[1,91],$VH=[1,92],$VI=[1,93],$VJ=[1,94],$VK=[1,95],$VL=[1,96],$VM=[1,97],$VN=[1,98],$VO=[1,99],$VP=[1,100],$VQ=[1,101],$VR=[1,102],$VS=[1,103],$VT=[5,10,15,17,18,19,20,21,24,25,27,28,29,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,56,57,59,62,66,67,68,69,70,71,72,73,74,75,77,78],$VU=[1,104],$VV=[5,9,10,15,17,18,19,20,21,24,25,27,28,29,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,56,57,58,59,62,66,67,68,69,70,71,72,73,74,75,77,78],$VW=[2,53],$VX=[2,54],$VY=[2,55],$VZ=[5,10,15,17,18,19,20,21,24,25,27,28,29,36,38,56,57,59,66,67,68,69,70,71,72,73,74,75,77,78],$V_=[5,10,15,17,18,19,20,21,24,25,27,28,29,36,38,39,40,41,42,43,44,45,56,57,59,62,66,67,68,69,70,71,72,73,74,75,77,78],$V$=[5,10,15,17,18,19,20,21,24,25,27,28,29,36,38,39,40,41,42,43,44,45,46,47,48,49,56,57,59,62,66,67,68,69,70,71,72,73,74,75,77,78],$V01=[5,10,15,17,18,19,20,21,24,25,27,28,29,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,56,57,59,62,66,67,68,69,70,71,72,73,74,75,77,78],$V11=[10,15,18,19,20,24,25,27,28,29,36,51,56,57,59,66,67,68,69,70,71,72,73,74,75,77,78];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"program_repetition0":4,"EOF":5,"statement":6,"identifier":7,"statement_repetition0":8,":":9,"CASE":10,"integer":11,"statement_repetition1":12,"statement_repetition2":13,"compound_statement":14,"IF":15,"prim_expr":16,"ELSE":17,"WHILE":18,"FOR":19,"(":20,";":21,"expr":22,"statement_repetition3":23,")":24,"TRY":25,"CATCH":26,"SWITCH":27,"BREAK":28,"CONTINUE":29,"nonident_prim_expr":30,"=":31,"+=":32,"-=":33,"++":34,"--":35,"{":36,"compound_statement_repetition0":37,"}":38,"&&":39,"||":40,"&":41,"|":42,"^":43,"==":44,"!=":45,"<":46,">":47,"<=":48,">=":49,"+":50,"-":51,"*":52,"/":53,"%":54,"func_prim_expr":55,"~":56,"!":57,"::":58,"$":59,".":60,"[":61,"]":62,"string":63,"number":64,"builtin_vars":65,"NULL":66,"NIL":67,"GAME":68,"LEVEL":69,"LOCAL":70,"PARM":71,"SELF":72,"GROUP":73,"IDENTIFIER":74,"STRING":75,"float":76,"FLOAT":77,"INTEGER":78,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:":",10:"CASE",15:"IF",17:"ELSE",18:"WHILE",19:"FOR",20:"(",21:";",24:")",25:"TRY",26:"CATCH",27:"SWITCH",28:"BREAK",29:"CONTINUE",31:"=",32:"+=",33:"-=",34:"++",35:"--",36:"{",38:"}",39:"&&",40:"||",41:"&",42:"|",43:"^",44:"==",45:"!=",46:"<",47:">",48:"<=",49:">=",50:"+",51:"-",52:"*",53:"/",54:"%",56:"~",57:"!",58:"::",59:"$",60:".",61:"[",62:"]",66:"NULL",67:"NIL",68:"GAME",69:"LEVEL",70:"LOCAL",71:"PARM",72:"SELF",73:"GROUP",74:"IDENTIFIER",75:"STRING",77:"FLOAT",78:"INTEGER"},
productions_: [0,[3,2],[6,3],[6,4],[6,4],[6,1],[6,3],[6,5],[6,3],[6,9],[6,4],[6,3],[6,1],[6,1],[6,3],[6,3],[6,3],[6,2],[6,2],[14,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,1],[22,1],[55,2],[55,2],[55,2],[55,3],[55,3],[16,1],[16,3],[30,4],[30,3],[30,4],[30,1],[30,1],[30,5],[30,1],[30,3],[30,2],[30,2],[30,2],[30,1],[30,1],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1],[7,1],[63,1],[64,1],[64,1],[76,1],[11,1],[4,0],[4,2],[8,0],[8,2],[12,0],[12,2],[13,0],[13,2],[23,0],[23,2],[37,0],[37,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return Program({},$$[$0-1]) 
break;
case 64:
this.$ = Identifier({value: $$[$0]});
break;
case 65:
this.$ = String({value: $$[$0]});
break;
case 70: case 72: case 74: case 76: case 78: case 80:
this.$ = [];
break;
case 71: case 73: case 75: case 77: case 79: case 81:
$$[$0-1].push($$[$0]);
break;
}
},
table: [o($V0,[2,70],{3:1,4:2}),{1:[3]},{5:[1,3],6:4,7:5,10:$V1,11:29,14:7,15:$V2,18:$V3,19:$V4,20:$V5,25:$V6,27:$V7,28:$V8,29:$V9,30:15,36:$Va,51:$Vb,56:$Vc,57:$Vd,59:$Ve,63:19,64:20,65:22,66:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:30,77:$Vp,78:$Vq},{1:[2,1]},o($V0,[2,71]),o($Vr,[2,72],{8:39}),{7:41,11:40,74:$Vn,78:$Vq},o($Vs,[2,5]),{11:29,16:42,20:$V5,30:43,51:$Vb,56:$Vc,57:$Vd,59:$Ve,63:19,64:20,65:22,66:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,75:$Vo,76:30,77:$Vp,78:$Vq},{11:29,16:44,20:$V5,30:43,51:$Vb,56:$Vc,57:$Vd,59:$Ve,63:19,64:20,65:22,66:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,75:$Vo,76:30,77:$Vp,78:$Vq},{20:[1,45]},{14:46,36:$Va},{11:29,16:47,20:$V5,30:43,51:$Vb,56:$Vc,57:$Vd,59:$Ve,63:19,64:20,65:22,66:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,75:$Vo,76:30,77:$Vp,78:$Vq},o($Vs,[2,12]),o($Vs,[2,13]),{31:[1,48],32:[1,49],33:[1,50],34:[1,51],35:[1,52],60:$Vt,61:$Vu},o($Vv,[2,64]),o($Vw,[2,80],{37:55}),{20:[1,56]},o($Vv,[2,48]),o($Vv,$Vx),{7:64,11:29,20:$V5,22:58,30:59,51:$Vy,55:60,56:$Vz,57:$VA,59:$Ve,63:19,64:57,65:22,66:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:30,77:$Vp,78:$Vq},o($Vv,[2,51]),{11:29,20:$V5,30:65,51:$Vb,56:$Vc,57:$Vd,59:$Ve,63:19,64:20,65:22,66:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,75:$Vo,76:30,77:$Vp,78:$Vq},{11:29,20:$V5,30:66,51:$Vb,56:$Vc,57:$Vd,59:$Ve,63:19,64:20,65:22,66:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,75:$Vo,76:30,77:$Vp,78:$Vq},{11:29,20:$V5,30:67,51:$Vb,56:$Vc,57:$Vd,59:$Ve,63:19,64:20,65:22,66:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,75:$Vo,76:30,77:$Vp,78:$Vq},o($Vv,[2,56]),o($Vv,[2,57]),o($Vv,[2,65]),o($Vv,[2,66]),o($Vv,[2,67]),o($Vv,[2,58]),o($Vv,[2,59]),o($Vv,[2,60]),o($Vv,[2,61]),o($Vv,[2,62]),o($Vv,[2,63]),o($Vv,[2,69]),o($Vv,[2,68]),{9:[1,68],11:29,16:69,20:$V5,30:43,51:$Vb,56:$Vc,57:$Vd,59:$Ve,63:19,64:20,65:22,66:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,75:$Vo,76:30,77:$Vp,78:$Vq},o($Vr,[2,74],{12:70}),o($Vr,[2,76],{13:71}),{6:72,7:5,10:$V1,11:29,14:7,15:$V2,18:$V3,19:$V4,20:$V5,25:$V6,27:$V7,28:$V8,29:$V9,30:15,36:$Va,51:$Vb,56:$Vc,57:$Vd,58:$VB,59:$Ve,63:19,64:20,65:22,66:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:30,77:$Vp,78:$Vq},o($VC,[2,43],{60:$Vt,61:$Vu}),{6:74,7:5,10:$V1,11:29,14:7,15:$V2,18:$V3,19:$V4,20:$V5,25:$V6,27:$V7,28:$V8,29:$V9,30:15,36:$Va,51:$Vb,56:$Vc,57:$Vd,58:$VB,59:$Ve,63:19,64:20,65:22,66:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:30,77:$Vp,78:$Vq},{6:75,7:5,10:$V1,11:29,14:7,15:$V2,18:$V3,19:$V4,20:$V5,25:$V6,27:$V7,28:$V8,29:$V9,30:15,36:$Va,51:$Vb,56:$Vc,57:$Vd,59:$Ve,63:19,64:20,65:22,66:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:30,77:$Vp,78:$Vq},{26:[1,76]},{14:77,36:$Va,58:$VB},{7:64,11:29,20:$V5,22:78,30:59,51:$Vy,55:60,56:$Vz,57:$VA,59:$Ve,63:19,64:20,65:22,66:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:30,77:$Vp,78:$Vq},{7:64,11:29,20:$V5,22:79,30:59,51:$Vy,55:60,56:$Vz,57:$VA,59:$Ve,63:19,64:20,65:22,66:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:30,77:$Vp,78:$Vq},{7:64,11:29,20:$V5,22:80,30:59,51:$Vy,55:60,56:$Vz,57:$VA,59:$Ve,63:19,64:20,65:22,66:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:30,77:$Vp,78:$Vq},o($Vs,[2,17]),o($Vs,[2,18]),{7:81,74:$Vn},{7:64,11:29,20:$V5,22:82,30:59,51:$Vy,55:60,56:$Vz,57:$VA,59:$Ve,63:19,64:20,65:22,66:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:30,77:$Vp,78:$Vq},{6:84,7:5,10:$V1,11:29,14:7,15:$V2,18:$V3,19:$V4,20:$V5,25:$V6,27:$V7,28:$V8,29:$V9,30:15,36:$Va,38:[1,83],51:$Vb,56:$Vc,57:$Vd,59:$Ve,63:19,64:20,65:22,66:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:30,77:$Vp,78:$Vq},{11:29,16:85,20:$V5,30:43,51:$Vb,56:$Vc,57:$Vd,59:$Ve,63:19,64:20,65:22,66:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,75:$Vo,76:30,77:$Vp,78:$Vq},o([24,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,58,60,61],$Vx,{11:29,76:30,64:86,77:$Vp,78:$Vq}),{24:[1,87],39:$VD,40:$VE,41:$VF,42:$VG,43:$VH,44:$VI,45:$VJ,46:$VK,47:$VL,48:$VM,49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS},o($VT,[2,36],{58:$VU,60:$Vt,61:$Vu}),o($VT,[2,37]),{7:64,11:29,20:$V5,30:105,51:$Vy,55:106,56:$Vz,57:$VA,59:$Ve,63:19,64:20,65:22,66:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:30,77:$Vp,78:$Vq},{7:64,11:29,20:$V5,30:107,51:$Vy,55:108,56:$Vz,57:$VA,59:$Ve,63:19,64:20,65:22,66:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:30,77:$Vp,78:$Vq},{7:64,11:29,20:$V5,30:109,51:$Vy,55:110,56:$Vz,57:$VA,59:$Ve,63:19,64:20,65:22,66:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:30,77:$Vp,78:$Vq},{58:[1,111]},o($VV,$VW,{60:$Vt,61:$Vu}),o($VV,$VX,{60:$Vt,61:$Vu}),o($VV,$VY,{60:$Vt,61:$Vu}),o($Vs,[2,2]),o($Vr,[2,73],{58:$VB}),{9:[1,112],11:29,16:113,20:$V5,30:43,51:$Vb,56:$Vc,57:$Vd,59:$Ve,63:19,64:20,65:22,66:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,75:$Vo,76:30,77:$Vp,78:$Vq},{9:[1,114],11:29,16:115,20:$V5,30:43,51:$Vb,56:$Vc,57:$Vd,59:$Ve,63:19,64:20,65:22,66:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,75:$Vo,76:30,77:$Vp,78:$Vq},o([5,10,15,18,19,20,21,24,25,27,28,29,36,38,51,56,57,59,66,67,68,69,70,71,72,73,74,75,77,78],[2,6],{17:[1,116]}),{11:29,16:117,20:$V5,30:43,51:$Vb,56:$Vc,57:$Vd,59:$Ve,63:19,64:20,65:22,66:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,75:$Vo,76:30,77:$Vp,78:$Vq},o($Vs,[2,8]),{21:[1,118]},{14:119,36:$Va},o($Vs,[2,11]),o($VZ,[2,14],{39:$VD,40:$VE,41:$VF,42:$VG,43:$VH,44:$VI,45:$VJ,46:$VK,47:$VL,48:$VM,49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS}),o($VZ,[2,15],{39:$VD,40:$VE,41:$VF,42:$VG,43:$VH,44:$VI,45:$VJ,46:$VK,47:$VL,48:$VM,49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS}),o($VZ,[2,16],{39:$VD,40:$VE,41:$VF,42:$VG,43:$VH,44:$VI,45:$VJ,46:$VK,47:$VL,48:$VM,49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS}),o($Vv,[2,46]),{39:$VD,40:$VE,41:$VF,42:$VG,43:$VH,44:$VI,45:$VJ,46:$VK,47:$VL,48:$VM,49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS,62:[1,120]},o([5,10,15,17,18,19,20,21,24,25,26,27,28,29,36,38,51,56,57,59,66,67,68,69,70,71,72,73,74,75,77,78],[2,19]),o($Vw,[2,81]),{24:[1,121],58:$VB},{11:29,64:122,76:30,77:$Vp,78:$Vq},o($Vv,[2,52]),{7:64,11:29,20:$V5,22:123,30:59,51:$Vy,55:60,56:$Vz,57:$VA,59:$Ve,63:19,64:20,65:22,66:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:30,77:$Vp,78:$Vq},{7:64,11:29,20:$V5,22:124,30:59,51:$Vy,55:60,56:$Vz,57:$VA,59:$Ve,63:19,64:20,65:22,66:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:30,77:$Vp,78:$Vq},{7:64,11:29,20:$V5,22:125,30:59,51:$Vy,55:60,56:$Vz,57:$VA,59:$Ve,63:19,64:20,65:22,66:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:30,77:$Vp,78:$Vq},{7:64,11:29,20:$V5,22:126,30:59,51:$Vy,55:60,56:$Vz,57:$VA,59:$Ve,63:19,64:20,65:22,66:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:30,77:$Vp,78:$Vq},{7:64,11:29,20:$V5,22:127,30:59,51:$Vy,55:60,56:$Vz,57:$VA,59:$Ve,63:19,64:20,65:22,66:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:30,77:$Vp,78:$Vq},{7:64,11:29,20:$V5,22:128,30:59,51:$Vy,55:60,56:$Vz,57:$VA,59:$Ve,63:19,64:20,65:22,66:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:30,77:$Vp,78:$Vq},{7:64,11:29,20:$V5,22:129,30:59,51:$Vy,55:60,56:$Vz,57:$VA,59:$Ve,63:19,64:20,65:22,66:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:30,77:$Vp,78:$Vq},{7:64,11:29,20:$V5,22:130,30:59,51:$Vy,55:60,56:$Vz,57:$VA,59:$Ve,63:19,64:20,65:22,66:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:30,77:$Vp,78:$Vq},{7:64,11:29,20:$V5,22:131,30:59,51:$Vy,55:60,56:$Vz,57:$VA,59:$Ve,63:19,64:20,65:22,66:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:30,77:$Vp,78:$Vq},{7:64,11:29,20:$V5,22:132,30:59,51:$Vy,55:60,56:$Vz,57:$VA,59:$Ve,63:19,64:20,65:22,66:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:30,77:$Vp,78:$Vq},{7:64,11:29,20:$V5,22:133,30:59,51:$Vy,55:60,56:$Vz,57:$VA,59:$Ve,63:19,64:20,65:22,66:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:30,77:$Vp,78:$Vq},{7:64,11:29,20:$V5,22:134,30:59,51:$Vy,55:60,56:$Vz,57:$VA,59:$Ve,63:19,64:20,65:22,66:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:30,77:$Vp,78:$Vq},{7:64,11:29,20:$V5,22:135,30:59,51:$Vy,55:60,56:$Vz,57:$VA,59:$Ve,63:19,64:20,65:22,66:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:30,77:$Vp,78:$Vq},{7:64,11:29,20:$V5,22:136,30:59,51:$Vy,55:60,56:$Vz,57:$VA,59:$Ve,63:19,64:20,65:22,66:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:30,77:$Vp,78:$Vq},{7:64,11:29,20:$V5,22:137,30:59,51:$Vy,55:60,56:$Vz,57:$VA,59:$Ve,63:19,64:20,65:22,66:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:30,77:$Vp,78:$Vq},{7:64,11:29,20:$V5,22:138,30:59,51:$Vy,55:60,56:$Vz,57:$VA,59:$Ve,63:19,64:20,65:22,66:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:30,77:$Vp,78:$Vq},{11:29,16:139,20:$V5,30:43,51:$Vb,56:$Vc,57:$Vd,59:$Ve,63:19,64:20,65:22,66:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,75:$Vo,76:30,77:$Vp,78:$Vq},o($VT,$VW,{58:$VU,60:$Vt,61:$Vu}),o($VT,[2,38]),o($VT,$VX,{58:$VU,60:$Vt,61:$Vu}),o($VT,[2,39]),o($VT,$VY,{58:$VU,60:$Vt,61:$Vu}),o($VT,[2,40]),{11:29,16:140,20:$V5,30:43,51:$Vb,56:$Vc,57:$Vd,59:$Ve,63:19,64:20,65:22,66:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,75:$Vo,76:30,77:$Vp,78:$Vq},o($Vs,[2,3]),o($Vr,[2,75],{58:$VB}),o($Vs,[2,4]),o($Vr,[2,77],{58:$VB}),{6:141,7:5,10:$V1,11:29,14:7,15:$V2,18:$V3,19:$V4,20:$V5,25:$V6,27:$V7,28:$V8,29:$V9,30:15,36:$Va,51:$Vb,56:$Vc,57:$Vd,59:$Ve,63:19,64:20,65:22,66:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:30,77:$Vp,78:$Vq},o($VC,[2,44]),{7:64,11:29,20:$V5,22:142,30:59,51:$Vy,55:60,56:$Vz,57:$VA,59:$Ve,63:19,64:20,65:22,66:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:30,77:$Vp,78:$Vq},o($Vs,[2,10]),o($Vv,[2,47]),o($Vv,[2,45]),{24:[1,143]},o([5,10,15,17,18,19,20,21,24,25,27,28,29,36,38,39,40,56,57,59,62,66,67,68,69,70,71,72,73,74,75,77,78],[2,20],{41:$VF,42:$VG,43:$VH,44:$VI,45:$VJ,46:$VK,47:$VL,48:$VM,49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS}),o([5,10,15,17,18,19,20,21,24,25,27,28,29,36,38,40,56,57,59,62,66,67,68,69,70,71,72,73,74,75,77,78],[2,21],{39:$VD,41:$VF,42:$VG,43:$VH,44:$VI,45:$VJ,46:$VK,47:$VL,48:$VM,49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS}),o([5,10,15,17,18,19,20,21,24,25,27,28,29,36,38,39,40,41,42,43,56,57,59,62,66,67,68,69,70,71,72,73,74,75,77,78],[2,22],{44:$VI,45:$VJ,46:$VK,47:$VL,48:$VM,49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS}),o([5,10,15,17,18,19,20,21,24,25,27,28,29,36,38,39,40,42,56,57,59,62,66,67,68,69,70,71,72,73,74,75,77,78],[2,23],{41:$VF,43:$VH,44:$VI,45:$VJ,46:$VK,47:$VL,48:$VM,49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS}),o([5,10,15,17,18,19,20,21,24,25,27,28,29,36,38,39,40,42,43,56,57,59,62,66,67,68,69,70,71,72,73,74,75,77,78],[2,24],{41:$VF,44:$VI,45:$VJ,46:$VK,47:$VL,48:$VM,49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS}),o($V_,[2,25],{46:$VK,47:$VL,48:$VM,49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS}),o($V_,[2,26],{46:$VK,47:$VL,48:$VM,49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS}),o($V$,[2,27],{50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS}),o($V$,[2,28],{50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS}),o($V$,[2,29],{50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS}),o($V$,[2,30],{50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS}),o($V01,[2,31],{52:$VQ,53:$VR,54:$VS}),o($V01,[2,32],{52:$VQ,53:$VR,54:$VS}),o($VT,[2,33]),o($VT,[2,34]),o($VT,[2,35]),o($VT,[2,42],{58:$VB}),o($VT,[2,41],{58:$VB}),o($Vs,[2,7]),{21:[1,144],39:$VD,40:$VE,41:$VF,42:$VG,43:$VH,44:$VI,45:$VJ,46:$VK,47:$VL,48:$VM,49:$VN,50:$VO,51:$VP,52:$VQ,53:$VR,54:$VS},o($Vv,[2,50]),o($V11,[2,78],{23:145}),{6:147,7:5,10:$V1,11:29,14:7,15:$V2,18:$V3,19:$V4,20:$V5,24:[1,146],25:$V6,27:$V7,28:$V8,29:$V9,30:15,36:$Va,51:$Vb,56:$Vc,57:$Vd,59:$Ve,63:19,64:20,65:22,66:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:30,77:$Vp,78:$Vq},{6:148,7:5,10:$V1,11:29,14:7,15:$V2,18:$V3,19:$V4,20:$V5,25:$V6,27:$V7,28:$V8,29:$V9,30:15,36:$Va,51:$Vb,56:$Vc,57:$Vd,59:$Ve,63:19,64:20,65:22,66:$Vf,67:$Vg,68:$Vh,69:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:30,77:$Vp,78:$Vq},o($V11,[2,79]),o($Vs,[2,9])],
defaultActions: {3:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  var ast = require('./lib/ast'),

  Program = ast.Program,
  ThreadStatement = ast.ThreadStatement,
  IfStatement = ast.IfStatement,
  CompoundStatement = ast.CompoundStatement,
  StatementList = ast.StatementList,

  ProcedureStmt = ast.ProcedureStmt,
  BlockStmt   = ast.BlockStmt,
  LoopStmt    = ast.LoopStmt,
  MuLoopStmt  = ast.MuLoopStmt,
  NumberLit   = ast.NumberLit,
  BooleanLit  = ast.BooleanLit,
  OutputExpr  = ast.OutputExpr,
  Identifier  = ast.Identifier,
  CellExpr    = ast.CellExpr,
  PlusExpr    = ast.PlusExpr,
  TimesExpr   = ast.TimesExpr,
  ApplyExpr   = ast.ApplyExpr,
  LessCond    = ast.LessCond,
  GreaterCond   = ast.GreaterCond,
  GreaterCond   = ast.GreaterCond,
  EqualCond   = ast.EqualCond,
  CompoundCond  = ast.CompoundCond,
  AssignStmt  = ast.AssignStmt,
  IfThenStmt  = ast.IfThenStmt,
  QuitStmt    = ast.QuitStmt,
  AbortStmt   = ast.AbortStmt;


// additional user code here
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:this.begin('COMMENT');
break;
case 1:/* consume */
break;
case 2:this.begin('INITIAL');
break;
case 3:/* ignore */
break;
case 4:return 78
break;
case 5:return 77
break;
case 6:return 75;
break;
case 7:return 75;
break;
case 8:return 15
break;
case 9:return 'END'
break;
case 10:return 17
break;
case 11:return 18
break;
case 12:return 19
break;
case 13:return 29
break;
case 14:return 10
break;
case 15:return 28
break;
case 16:return 27
break;
case 17:return 25
break;
case 18:return 26
break;
case 19:return 70
break;
case 20:return 69
break;
case 21:return 68
break;
case 22:return 71
break;
case 23:return 72
break;
case 24:return 73
break;
case 25:return 66
break;
case 26:return 67
break;
case 27:return 74
break;
case 28:return 58
break;
case 29:return 32
break;
case 30:return 33
break;
case 31:return '*='
break;
case 32:return '/='
break;
case 33:return '%='
break;
case 34:return 34
break;
case 35:return 35
break;
case 36:return 39
break;
case 37:return 40
break;
case 38:return 43
break;
case 39:return 44
break;
case 40:return 45
break;
case 41:return 48
break;
case 42:return 49
break;
case 43:return 46
break;
case 44:return 47
break;
case 45:return 41
break;
case 46:return 42
break;
case 47:return 50
break;
case 48:return 51
break;
case 49:return 52
break;
case 50:return 53
break;
case 51:return 54
break;
case 52:return 59
break;
case 53:return 60
break;
case 54:return 61
break;
case 55:return 62
break;
case 56:return 20
break;
case 57:return 24
break;
case 58:return 36
break;
case 59:return 38
break;
case 60:return 9
break;
case 61:return 21
break;
case 62:return ','
break;
case 63:return 31
break;
case 64:return 57
break;
case 65:return 56
break;
case 66:return 5
break;
case 67:return 'INVALID'
break;
case 68:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\/\/)/,/^(?:[^\n]*)/,/^(?:\n)/,/^(?:\s+)/,/^(?:(-?(([1-9][0-9]+|[0-9]))+))/,/^(?:((-?(([1-9][0-9]+|[0-9]))+)+\.(([1-9][0-9]+|[0-9]))+))/,/^(?:(').*('))/,/^(?:(").*("))/,/^(?:if)/,/^(?:end)/,/^(?:else)/,/^(?:while)/,/^(?:for)/,/^(?:continue)/,/^(?:case)/,/^(?:break)/,/^(?:switch)/,/^(?:try)/,/^(?:catch)/,/^(?:local)/,/^(?:level)/,/^(?:game)/,/^(?:parm)/,/^(?:self)/,/^(?:group)/,/^(?:NULL)/,/^(?:NIL)/,/^(?:(([$A-Za-z_])(([$A-Za-z_])|[0-9])*))/,/^(?:::)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:%=)/,/^(?:\+\+)/,/^(?:--)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\^)/,/^(?:==)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:&)/,/^(?:\|)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\$)/,/^(?:\.)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?::)/,/^(?:;)/,/^(?:,)/,/^(?:=)/,/^(?:!)/,/^(?:~)/,/^(?:$)/,/^(?:.)/,/^(?:.)/],
conditions: {"COMMENT":{"rules":[1,2],"inclusive":false},"INITIAL":{"rules":[0,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}