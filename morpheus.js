/* parser generated by jison 0.4.14 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(v,a,l,r){for(l=a.length,r={};l--;r[a[l]]=v);return r},V0=[2,136],V1=[1,15],V2=[1,16],V3=[1,40],V4=[1,19],V5=[1,25],V6=[1,20],V7=[1,21],V8=[1,17],V9=[1,18],Va=[1,23],Vb=[1,22],Vc=[1,41],Vd=[1,42],Ve=[1,33],Vf=[1,34],Vg=[1,70],Vh=[1,71],Vi=[1,68],Vj=[1,69],Vk=[1,72],Vl=[1,73],Vm=[1,74],Vn=[1,44],Vo=[1,45],Vp=[1,46],Vq=[1,47],Vr=[1,48],Vs=[1,49],Vt=[1,54],Vu=[1,59],Vv=[1,58],Vw=[5,19,21,22,23,26,27,29,30,31,32,33,35,37,42,44,50,51,56,60,100,101,107,108,109,110,111,124,125,126,127,128,129,130,133,134],Vx=[2,42],Vy=[2,138],Vz=[2,14],VA=[1,93],VB=[2,18,23,25,28,29,50,51,56,57,58,59,60,64,66,67,68,69,70,71,72,73,74,75,76,77,80,82,84,86,89,91,92,94,95,96,97,100,101,103,104,105,107,108,109,110,111,115,116,117,118,119,124,125,126,127,128,129,130,133,134],VC=[2,23,25,28,29,50,51,56,58,60,77,100,101,107,108,109,110,111,124,125,126,127,128,129,130,133,134],VD=[2,113],VE=[2,74],VF=[2,115],VG=[1,108],VH=[1,109],VI=[2,75],VJ=[1,110],VK=[2,23,25,28,29,50,51,56,57,58,59,60,64,66,67,68,69,70,71,72,73,74,75,76,77,80,82,84,86,89,91,92,94,95,96,97,100,101,103,104,105,107,108,109,110,111,115,116,117,118,119,124,125,126,127,128,129,130,133,134],VL=[2,77],VM=[1,112],VN=[2,43],VO=[2,79],VP=[1,117],VQ=[2,18,23,25,28,29,50,51,56,57,58,59,60,64,66,67,68,69,70,71,72,73,74,75,76,77,80,82,84,86,89,91,92,94,95,96,97,100,101,103,104,105,107,108,109,110,111,115,116,117,118,119,121,124,125,126,127,128,129,130,133,134],VR=[2,52],VS=[2,81],VT=[2,83],VU=[1,120],VV=[1,121],VW=[2,85],VX=[1,122],VY=[1,123],VZ=[1,124],V_=[1,125],V$=[2,23,25,28,29,50,51,56,58,60,77,80,82,84,86,89,91,92,94,95,96,97,100,101,107,108,109,110,111,124,125,126,127,128,129,130,133,134],V01=[2,93],V11=[2,94],V21=[1,128],V31=[1,129],V41=[1,130],V51=[2,23,25,28,29,50,51,56,58,60,77,80,82,84,86,89,91,92,94,95,96,97,100,101,103,104,105,107,108,109,110,111,124,125,126,127,128,129,130,133,134],V61=[2,110],V71=[23,29,50,51,56,60,100,101,107,108,109,110,111,124,125,126,127,128,129,130,133,134],V81=[130,133,134],V91=[2,49],Va1=[23,29,50,51,56,60,124,125,126,127,128,129,130,133,134],Vb1=[2,23,25,28,29,50,51,56,58,60,77,80,82,84,86,89,91,92,94,95,96,97,100,101,103,104,105,107,108,109,110,111,115,116,117,118,119,124,125,126,127,128,129,130,133,134],Vc1=[2,76],Vd1=[2,78],Ve1=[2,80],Vf1=[2,84],Vg1=[2,86],Vh1=[2,87],Vi1=[2,95],Vj1=[2,96],Vk1=[2,15],Vl1=[2,36],Vm1=[2,140],Vn1=[1,211],Vo1=[2,141],Vp1=[2,38],Vq1=[2,37];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"program_repetition0":4,"EOF":5,"statement":6,"compound_statement":7,"if_statement":8,"iteration_statement":9,"continue_statement":10,"break_statement":11,"return_statement":12,"switch_statement":13,"try_statement":14,"expression_statement":15,"identifier":16,"statement_repetition0":17,":":18,"{":19,"statement_list":20,"}":21,"IF":22,"(":23,"expression":24,")":25,"ELSE":26,"CONTINUE":27,";":28,"IDENTIFIER":29,"BREAK":30,"END":31,"WHILE":32,"FOR":33,"iteration_statement_repetition0":34,"TRY":35,"CATCH":36,"SWITCH":37,"case_block":38,"case_clauses":39,"default_clause":40,"case_clause":41,"CASE":42,"case_clause_group0":43,"DEFAULT":44,"primary_expression":45,"builtin_vars":46,"literal":47,"array_literal_constant":48,"vector_literal":49,"NULL":50,"NIL":51,"array_literal_constant_repetition_plus0":52,"number":53,"string":54,"member_expression":55,"function_expression":56,"[":57,"]":58,".":59,"$":60,"assignment_expression":61,"conditional_expression":62,"lefthandside_expression":63,"=":64,"assignment_operator":65,"*=":66,"/=":67,"%=":68,"+=":69,"-=":70,"<<=":71,">>=":72,">>>=":73,"&=":74,"^=":75,"|=":76,",":77,"logical_or_expression":78,"logical_and_expression":79,"||":80,"bitwise_or_expression":81,"&&":82,"bitwise_xor_expression":83,"|":84,"bitwise_and_expression":85,"^":86,"bitwise_and_selection":87,"equality_expression":88,"&":89,"relational_expression":90,"==":91,"!=":92,"shift_expression":93,"<":94,">":95,"<=":96,">=":97,"additive_expression":98,"multiplicative_expression":99,"+":100,"-":101,"unary_expression":102,"*":103,"/":104,"%":105,"unary_expr":106,"++":107,"--":108,"~":109,"!":110,"ISALIVE":111,"postfix_expression":112,"call_expression":113,"call_literal":114,"THREAD":115,"WAITTHREAD":116,"EXEC":117,"WAITEXEC":118,"WAITTILL":119,"func_prim_expr":120,"::":121,"prim_expr":122,"nonident_prim_expr":123,"GAME":124,"LEVEL":125,"LOCAL":126,"PARM":127,"SELF":128,"GROUP":129,"STRING":130,"integer":131,"float":132,"FLOAT":133,"INTEGER":134,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",18:":",19:"{",21:"}",22:"IF",23:"(",25:")",26:"ELSE",27:"CONTINUE",28:";",29:"IDENTIFIER",30:"BREAK",31:"END",32:"WHILE",33:"FOR",35:"TRY",36:"CATCH",37:"SWITCH",42:"CASE",44:"DEFAULT",50:"NULL",51:"NIL",56:"function_expression",57:"[",58:"]",59:".",60:"$",64:"=",66:"*=",67:"/=",68:"%=",69:"+=",70:"-=",71:"<<=",72:">>=",73:">>>=",74:"&=",75:"^=",76:"|=",77:",",80:"||",82:"&&",84:"|",86:"^",87:"bitwise_and_selection",89:"&",91:"==",92:"!=",94:"<",95:">",96:"<=",97:">=",100:"+",101:"-",103:"*",104:"/",105:"%",107:"++",108:"--",109:"~",110:"!",111:"ISALIVE",115:"THREAD",116:"WAITTHREAD",117:"EXEC",118:"WAITEXEC",119:"WAITTILL",121:"::",122:"prim_expr",123:"nonident_prim_expr",124:"GAME",125:"LEVEL",126:"LOCAL",127:"PARM",128:"SELF",129:"GROUP",130:"STRING",133:"FLOAT",134:"INTEGER"},
productions_: [0,[3,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,3],[7,3],[20,2],[20,0],[8,5],[8,7],[10,2],[10,2],[10,3],[10,3],[11,2],[11,2],[11,3],[11,3],[12,2],[12,2],[12,3],[12,3],[9,5],[9,9],[14,4],[13,5],[38,3],[38,5],[39,2],[39,0],[41,4],[40,3],[15,2],[15,2],[45,1],[45,1],[45,1],[45,1],[45,1],[45,3],[45,1],[45,1],[48,2],[49,5],[47,1],[47,1],[55,1],[55,1],[55,4],[55,3],[55,4],[61,1],[61,3],[61,3],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1],[24,1],[24,3],[62,1],[78,1],[78,3],[79,1],[79,3],[81,1],[81,3],[83,1],[83,3],[85,1],[85,3],[88,1],[88,3],[88,3],[90,1],[90,3],[90,3],[90,3],[90,3],[93,1],[98,1],[98,3],[98,3],[99,1],[99,3],[99,3],[99,3],[106,2],[106,2],[106,2],[106,2],[106,2],[106,2],[106,2],[102,1],[102,1],[112,1],[112,2],[112,2],[113,1],[113,3],[63,1],[114,1],[114,1],[114,1],[114,1],[114,1],[120,2],[120,3],[120,3],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[16,1],[54,1],[53,1],[53,1],[132,1],[131,1],[4,0],[4,2],[17,0],[17,2],[34,0],[34,2],[43,1],[43,1],[43,1],[52,2],[52,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: return Program({},$$[$0-1]) 
break;
case 130:this.$ = Identifier({value: $$[$0]});
break;
case 131:this.$ = String({value: $$[$0]});
break;
case 136:this.$ = [];
break;
case 137:$$[$0-1].push($$[$0]);
break;
case 138:this.$ = [];
break;
case 139:$$[$0-1].push($$[$0]);
break;
case 140:this.$ = [];
break;
case 141:$$[$0-1].push($$[$0]);
break;
case 145:this.$ = [$$[$0-1]];
break;
case 146:$$[$0-2].push($$[$0-1]);
break;
}
},
table: [{3:1,4:2,5:V0,19:V0,22:V0,23:V0,27:V0,29:V0,30:V0,31:V0,32:V0,33:V0,35:V0,37:V0,50:V0,51:V0,56:V0,60:V0,100:V0,101:V0,107:V0,108:V0,109:V0,110:V0,111:V0,124:V0,125:V0,126:V0,127:V0,128:V0,129:V0,130:V0,133:V0,134:V0},{1:[3]},{5:[1,3],6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,19:V1,22:V2,23:V3,24:24,27:V4,29:V5,30:V6,31:V7,32:V8,33:V9,35:Va,37:Vb,45:32,46:36,47:37,48:38,49:39,50:Vc,51:Vd,52:52,53:51,54:50,55:30,56:Ve,60:Vf,61:26,62:27,63:28,78:29,79:31,81:35,83:43,85:53,88:57,90:60,93:61,98:62,99:63,100:Vg,101:Vh,102:64,106:66,107:Vi,108:Vj,109:Vk,110:Vl,111:Vm,112:65,113:67,124:Vn,125:Vo,126:Vp,127:Vq,128:Vr,129:Vs,130:Vt,131:55,132:56,133:Vu,134:Vv},{1:[2,1]},o([2,137],[5,19,22,23,27,29,30,31,32,33,35,37,50,51,56,60,100,101,107,108,109,110,111,124,125,126,127,128,129,130,133,134]),o([2,2],Vw),o([2,3],Vw),o([2,4],Vw),o([2,5],Vw),o([2,6],Vw),o([2,7],Vw),o([2,8],Vw),o([2,9],Vw),o([2,10],Vw),{2:Vx,17:75,18:Vy,23:Vy,28:Vx,29:Vy,50:Vy,51:Vy,57:Vx,59:Vx,64:Vx,66:Vx,67:Vx,68:Vx,69:Vx,70:Vx,71:Vx,72:Vx,73:Vx,74:Vx,75:Vx,76:Vx,77:Vx,80:Vx,82:Vx,84:Vx,86:Vx,89:Vx,91:Vx,92:Vx,94:Vx,95:Vx,96:Vx,97:Vx,100:Vx,101:Vx,103:Vx,104:Vx,105:Vx,107:Vx,108:Vx,115:Vx,116:Vx,117:Vx,118:Vx,119:Vx,124:Vy,125:Vy,126:Vy,127:Vy,128:Vy,129:Vy,130:Vy,133:Vy,134:Vy},{19:Vz,20:76,21:Vz,22:Vz,23:Vz,27:Vz,29:Vz,30:Vz,31:Vz,32:Vz,33:Vz,35:Vz,37:Vz,50:Vz,51:Vz,56:Vz,60:Vz,100:Vz,101:Vz,107:Vz,108:Vz,109:Vz,110:Vz,111:Vz,124:Vz,125:Vz,126:Vz,127:Vz,128:Vz,129:Vz,130:Vz,133:Vz,134:Vz},{23:[1,77]},{23:[1,78]},{23:[1,79]},{2:[1,81],28:[1,80],29:[1,82]},{2:[1,84],28:[1,83],29:[1,85]},{2:[1,87],28:[1,86],29:[1,88]},{23:[1,89]},{7:90,19:V1},{2:[1,92],28:[1,91],77:VA},o([2,130],VB),o([2,72],VC),o([2,58],VC),{2:VD,23:VD,25:VD,28:VD,29:VD,50:VD,51:VD,56:VD,58:VD,60:VD,64:[1,94],65:95,66:[1,96],67:[1,97],68:[1,98],69:[1,99],70:[1,100],71:[1,101],72:[1,102],73:[1,103],74:[1,104],75:[1,105],76:[1,106],77:VD,80:VD,82:VD,84:VD,86:VD,89:VD,91:VD,92:VD,94:VD,95:VD,96:VD,97:VD,100:VD,101:VD,103:VD,104:VD,105:VD,107:VD,108:VD,109:VD,110:VD,111:VD,115:VD,116:VD,117:VD,118:VD,119:VD,124:VD,125:VD,126:VD,127:VD,128:VD,129:VD,130:VD,133:VD,134:VD},{2:VE,23:VE,25:VE,28:VE,29:VE,50:VE,51:VE,56:VE,58:VE,60:VE,77:VE,80:[1,107],100:VE,101:VE,107:VE,108:VE,109:VE,110:VE,111:VE,124:VE,125:VE,126:VE,127:VE,128:VE,129:VE,130:VE,133:VE,134:VE},{2:VF,23:VF,25:VF,28:VF,29:VF,50:VF,51:VF,56:VF,57:VG,58:VF,59:VH,60:VF,64:VF,66:VF,67:VF,68:VF,69:VF,70:VF,71:VF,72:VF,73:VF,74:VF,75:VF,76:VF,77:VF,80:VF,82:VF,84:VF,86:VF,89:VF,91:VF,92:VF,94:VF,95:VF,96:VF,97:VF,100:VF,101:VF,103:VF,104:VF,105:VF,107:VF,108:VF,109:VF,110:VF,111:VF,115:VF,116:VF,117:VF,118:VF,119:VF,124:VF,125:VF,126:VF,127:VF,128:VF,129:VF,130:VF,133:VF,134:VF},{2:VI,23:VI,25:VI,28:VI,29:VI,50:VI,51:VI,56:VI,58:VI,60:VI,77:VI,80:VI,82:VJ,100:VI,101:VI,107:VI,108:VI,109:VI,110:VI,111:VI,124:VI,125:VI,126:VI,127:VI,128:VI,129:VI,130:VI,133:VI,134:VI},o([2,53],VK),o([2,54],VK),{23:[1,111]},{2:VL,23:VL,25:VL,28:VL,29:VL,50:VL,51:VL,56:VL,58:VL,60:VL,77:VL,80:VL,82:VL,84:VM,100:VL,101:VL,107:VL,108:VL,109:VL,110:VL,111:VL,124:VL,125:VL,126:VL,127:VL,128:VL,129:VL,130:VL,133:VL,134:VL},o([2,41],VB),{2:VN,18:VN,23:VN,25:VN,28:VN,29:VN,50:VN,51:VN,56:VN,57:VN,58:VN,59:VN,60:VN,64:VN,66:VN,67:VN,68:VN,69:VN,70:VN,71:VN,72:VN,73:VN,74:VN,75:VN,76:VN,77:VN,80:VN,82:VN,84:VN,86:VN,89:VN,91:VN,92:VN,94:VN,95:VN,96:VN,97:VN,100:VN,101:VN,103:VN,104:VN,105:VN,107:VN,108:VN,109:VN,110:VN,111:VN,115:VN,116:VN,117:VN,118:VN,119:VN,121:[1,113],124:VN,125:VN,126:VN,127:VN,128:VN,129:VN,130:VN,133:VN,134:VN},o([2,44],VB),o([2,45],VB),{16:116,23:V3,24:114,29:V5,45:32,46:36,47:37,48:38,49:39,50:Vc,51:Vd,52:52,53:115,54:50,55:30,56:Ve,60:Vf,61:26,62:27,63:28,78:29,79:31,81:35,83:43,85:53,88:57,90:60,93:61,98:62,99:63,100:Vg,101:Vh,102:64,106:66,107:Vi,108:Vj,109:Vk,110:Vl,111:Vm,112:65,113:67,124:Vn,125:Vo,126:Vp,127:Vq,128:Vr,129:Vs,130:Vt,131:55,132:56,133:Vu,134:Vv},o([2,47],VB),o([2,48],VB),{2:VO,23:VO,25:VO,28:VO,29:VO,50:VO,51:VO,56:VO,58:VO,60:VO,77:VO,80:VO,82:VO,84:VO,86:VP,100:VO,101:VO,107:VO,108:VO,109:VO,110:VO,111:VO,124:VO,125:VO,126:VO,127:VO,128:VO,129:VO,130:VO,133:VO,134:VO},o([2,124],VB),o([2,125],VB),o([2,126],VB),o([2,127],VB),o([2,128],VB),o([2,129],VB),o([2,51],VQ),o(VR,VQ),{47:118,53:51,54:50,130:Vt,131:55,132:56,133:Vu,134:Vv},{2:VS,23:VS,25:VS,28:VS,29:VS,50:VS,51:VS,56:VS,58:VS,60:VS,77:VS,80:VS,82:VS,84:VS,86:VS,89:[1,119],100:VS,101:VS,107:VS,108:VS,109:VS,110:VS,111:VS,124:VS,125:VS,126:VS,127:VS,128:VS,129:VS,130:VS,133:VS,134:VS},o([2,131],VQ),o([2,132],VQ),o([2,133],VQ),{2:VT,23:VT,25:VT,28:VT,29:VT,50:VT,51:VT,56:VT,58:VT,60:VT,77:VT,80:VT,82:VT,84:VT,86:VT,89:VT,91:VU,92:VV,100:VT,101:VT,107:VT,108:VT,109:VT,110:VT,111:VT,124:VT,125:VT,126:VT,127:VT,128:VT,129:VT,130:VT,133:VT,134:VT},o([2,135],VQ),o([2,134],VQ),{2:VW,23:VW,25:VW,28:VW,29:VW,50:VW,51:VW,56:VW,58:VW,60:VW,77:VW,80:VW,82:VW,84:VW,86:VW,89:VW,91:VW,92:VW,94:VX,95:VY,96:VZ,97:V_,100:VW,101:VW,107:VW,108:VW,109:VW,110:VW,111:VW,124:VW,125:VW,126:VW,127:VW,128:VW,129:VW,130:VW,133:VW,134:VW},o([2,88],V$),{2:V01,23:V01,25:V01,28:V01,29:V01,50:V01,51:V01,56:V01,58:V01,60:V01,77:V01,80:V01,82:V01,84:V01,86:V01,89:V01,91:V01,92:V01,94:V01,95:V01,96:V01,97:V01,100:[1,126],101:[1,127],107:V01,108:V01,109:V01,110:V01,111:V01,124:V01,125:V01,126:V01,127:V01,128:V01,129:V01,130:V01,133:V01,134:V01},{2:V11,23:V11,25:V11,28:V11,29:V11,50:V11,51:V11,56:V11,58:V11,60:V11,77:V11,80:V11,82:V11,84:V11,86:V11,89:V11,91:V11,92:V11,94:V11,95:V11,96:V11,97:V11,100:V11,101:V11,103:V21,104:V31,105:V41,107:V11,108:V11,109:V11,110:V11,111:V11,124:V11,125:V11,126:V11,127:V11,128:V11,129:V11,130:V11,133:V11,134:V11},o([2,97],V51),o([2,108],V51),o([2,109],V51),{2:V61,23:V61,25:V61,28:V61,29:V61,50:V61,51:V61,56:V61,58:V61,60:V61,77:V61,80:V61,82:V61,84:V61,86:V61,89:V61,91:V61,92:V61,94:V61,95:V61,96:V61,97:V61,100:V61,101:V61,103:V61,104:V61,105:V61,107:[1,131],108:[1,132],109:V61,110:V61,111:V61,114:133,115:[1,134],116:[1,135],117:[1,136],118:[1,137],119:[1,138],124:V61,125:V61,126:V61,127:V61,128:V61,129:V61,130:V61,133:V61,134:V61},{16:116,23:V3,29:V5,45:32,46:36,47:37,48:38,49:39,50:Vc,51:Vd,52:52,53:51,54:50,55:30,56:Ve,60:Vf,63:140,100:Vg,101:Vh,102:139,106:66,107:Vi,108:Vj,109:Vk,110:Vl,111:Vm,112:65,113:67,124:Vn,125:Vo,126:Vp,127:Vq,128:Vr,129:Vs,130:Vt,131:55,132:56,133:Vu,134:Vv},{16:116,23:V3,29:V5,45:32,46:36,47:37,48:38,49:39,50:Vc,51:Vd,52:52,53:51,54:50,55:30,56:Ve,60:Vf,63:140,100:Vg,101:Vh,102:141,106:66,107:Vi,108:Vj,109:Vk,110:Vl,111:Vm,112:65,113:67,124:Vn,125:Vo,126:Vp,127:Vq,128:Vr,129:Vs,130:Vt,131:55,132:56,133:Vu,134:Vv},{16:116,23:V3,29:V5,45:32,46:36,47:37,48:38,49:39,50:Vc,51:Vd,52:52,53:51,54:50,55:30,56:Ve,60:Vf,63:140,100:Vg,101:Vh,102:142,106:66,107:Vi,108:Vj,109:Vk,110:Vl,111:Vm,112:65,113:67,124:Vn,125:Vo,126:Vp,127:Vq,128:Vr,129:Vs,130:Vt,131:55,132:56,133:Vu,134:Vv},{16:116,23:V3,29:V5,45:32,46:36,47:37,48:38,49:39,50:Vc,51:Vd,52:52,53:51,54:50,55:30,56:Ve,60:Vf,63:140,100:Vg,101:Vh,102:143,106:66,107:Vi,108:Vj,109:Vk,110:Vl,111:Vm,112:65,113:67,124:Vn,125:Vo,126:Vp,127:Vq,128:Vr,129:Vs,130:Vt,131:55,132:56,133:Vu,134:Vv},{16:116,23:V3,29:V5,45:32,46:36,47:37,48:38,49:39,50:Vc,51:Vd,52:52,53:51,54:50,55:30,56:Ve,60:Vf,63:140,100:Vg,101:Vh,102:144,106:66,107:Vi,108:Vj,109:Vk,110:Vl,111:Vm,112:65,113:67,124:Vn,125:Vo,126:Vp,127:Vq,128:Vr,129:Vs,130:Vt,131:55,132:56,133:Vu,134:Vv},{16:116,23:V3,29:V5,45:32,46:36,47:37,48:38,49:39,50:Vc,51:Vd,52:52,53:51,54:50,55:30,56:Ve,60:Vf,63:140,100:Vg,101:Vh,102:145,106:66,107:Vi,108:Vj,109:Vk,110:Vl,111:Vm,112:65,113:67,124:Vn,125:Vo,126:Vp,127:Vq,128:Vr,129:Vs,130:Vt,131:55,132:56,133:Vu,134:Vv},{16:116,23:V3,29:V5,45:32,46:36,47:37,48:38,49:39,50:Vc,51:Vd,52:52,53:51,54:50,55:30,56:Ve,60:Vf,63:140,100:Vg,101:Vh,102:146,106:66,107:Vi,108:Vj,109:Vk,110:Vl,111:Vm,112:65,113:67,124:Vn,125:Vo,126:Vp,127:Vq,128:Vr,129:Vs,130:Vt,131:55,132:56,133:Vu,134:Vv},{16:116,18:[1,147],23:V3,29:V5,45:148,46:36,47:37,48:38,49:39,50:Vc,51:Vd,52:52,53:51,54:50,124:Vn,125:Vo,126:Vp,127:Vq,128:Vr,129:Vs,130:Vt,131:55,132:56,133:Vu,134:Vv},{6:150,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,19:V1,21:[1,149],22:V2,23:V3,24:24,27:V4,29:V5,30:V6,31:V7,32:V8,33:V9,35:Va,37:Vb,45:32,46:36,47:37,48:38,49:39,50:Vc,51:Vd,52:52,53:51,54:50,55:30,56:Ve,60:Vf,61:26,62:27,63:28,78:29,79:31,81:35,83:43,85:53,88:57,90:60,93:61,98:62,99:63,100:Vg,101:Vh,102:64,106:66,107:Vi,108:Vj,109:Vk,110:Vl,111:Vm,112:65,113:67,124:Vn,125:Vo,126:Vp,127:Vq,128:Vr,129:Vs,130:Vt,131:55,132:56,133:Vu,134:Vv},{16:116,23:V3,24:151,29:V5,45:32,46:36,47:37,48:38,49:39,50:Vc,51:Vd,52:52,53:51,54:50,55:30,56:Ve,60:Vf,61:26,62:27,63:28,78:29,79:31,81:35,83:43,85:53,88:57,90:60,93:61,98:62,99:63,100:Vg,101:Vh,102:64,106:66,107:Vi,108:Vj,109:Vk,110:Vl,111:Vm,112:65,113:67,124:Vn,125:Vo,126:Vp,127:Vq,128:Vr,129:Vs,130:Vt,131:55,132:56,133:Vu,134:Vv},{16:116,23:V3,24:152,29:V5,45:32,46:36,47:37,48:38,49:39,50:Vc,51:Vd,52:52,53:51,54:50,55:30,56:Ve,60:Vf,61:26,62:27,63:28,78:29,79:31,81:35,83:43,85:53,88:57,90:60,93:61,98:62,99:63,100:Vg,101:Vh,102:64,106:66,107:Vi,108:Vj,109:Vk,110:Vl,111:Vm,112:65,113:67,124:Vn,125:Vo,126:Vp,127:Vq,128:Vr,129:Vs,130:Vt,131:55,132:56,133:Vu,134:Vv},{16:116,23:V3,24:153,29:V5,45:32,46:36,47:37,48:38,49:39,50:Vc,51:Vd,52:52,53:51,54:50,55:30,56:Ve,60:Vf,61:26,62:27,63:28,78:29,79:31,81:35,83:43,85:53,88:57,90:60,93:61,98:62,99:63,100:Vg,101:Vh,102:64,106:66,107:Vi,108:Vj,109:Vk,110:Vl,111:Vm,112:65,113:67,124:Vn,125:Vo,126:Vp,127:Vq,128:Vr,129:Vs,130:Vt,131:55,132:56,133:Vu,134:Vv},o([2,17],Vw),o([2,18],Vw),{2:[1,155],28:[1,154]},o([2,21],Vw),o([2,22],Vw),{2:[1,157],28:[1,156]},o([2,25],Vw),o([2,26],Vw),{2:[1,159],28:[1,158]},{16:116,23:V3,24:160,29:V5,45:32,46:36,47:37,48:38,49:39,50:Vc,51:Vd,52:52,53:51,54:50,55:30,56:Ve,60:Vf,61:26,62:27,63:28,78:29,79:31,81:35,83:43,85:53,88:57,90:60,93:61,98:62,99:63,100:Vg,101:Vh,102:64,106:66,107:Vi,108:Vj,109:Vk,110:Vl,111:Vm,112:65,113:67,124:Vn,125:Vo,126:Vp,127:Vq,128:Vr,129:Vs,130:Vt,131:55,132:56,133:Vu,134:Vv},{36:[1,161]},o([2,39],Vw),o([2,40],Vw),{16:116,23:V3,29:V5,45:32,46:36,47:37,48:38,49:39,50:Vc,51:Vd,52:52,53:51,54:50,55:30,56:Ve,60:Vf,61:162,62:27,63:28,78:29,79:31,81:35,83:43,85:53,88:57,90:60,93:61,98:62,99:63,100:Vg,101:Vh,102:64,106:66,107:Vi,108:Vj,109:Vk,110:Vl,111:Vm,112:65,113:67,124:Vn,125:Vo,126:Vp,127:Vq,128:Vr,129:Vs,130:Vt,131:55,132:56,133:Vu,134:Vv},{16:116,23:V3,29:V5,45:32,46:36,47:37,48:38,49:39,50:Vc,51:Vd,52:52,53:51,54:50,55:30,56:Ve,60:Vf,61:163,62:27,63:28,78:29,79:31,81:35,83:43,85:53,88:57,90:60,93:61,98:62,99:63,100:Vg,101:Vh,102:64,106:66,107:Vi,108:Vj,109:Vk,110:Vl,111:Vm,112:65,113:67,124:Vn,125:Vo,126:Vp,127:Vq,128:Vr,129:Vs,130:Vt,131:55,132:56,133:Vu,134:Vv},{16:116,23:V3,29:V5,45:32,46:36,47:37,48:38,49:39,50:Vc,51:Vd,52:52,53:51,54:50,55:30,56:Ve,60:Vf,61:164,62:27,63:28,78:29,79:31,81:35,83:43,85:53,88:57,90:60,93:61,98:62,99:63,100:Vg,101:Vh,102:64,106:66,107:Vi,108:Vj,109:Vk,110:Vl,111:Vm,112:65,113:67,124:Vn,125:Vo,126:Vp,127:Vq,128:Vr,129:Vs,130:Vt,131:55,132:56,133:Vu,134:Vv},o([2,61],V71),o([2,62],V71),o([2,63],V71),o([2,64],V71),o([2,65],V71),o([2,66],V71),o([2,67],V71),o([2,68],V71),o([2,69],V71),o([2,70],V71),o([2,71],V71),{16:116,23:V3,29:V5,45:32,46:36,47:37,48:38,49:39,50:Vc,51:Vd,52:52,53:51,54:50,55:30,56:Ve,60:Vf,63:140,79:165,81:35,83:43,85:53,88:57,90:60,93:61,98:62,99:63,100:Vg,101:Vh,102:64,106:66,107:Vi,108:Vj,109:Vk,110:Vl,111:Vm,112:65,113:67,124:Vn,125:Vo,126:Vp,127:Vq,128:Vr,129:Vs,130:Vt,131:55,132:56,133:Vu,134:Vv},{16:116,23:V3,24:166,29:V5,45:32,46:36,47:37,48:38,49:39,50:Vc,51:Vd,52:52,53:51,54:50,55:30,56:Ve,60:Vf,61:26,62:27,63:28,78:29,79:31,81:35,83:43,85:53,88:57,90:60,93:61,98:62,99:63,100:Vg,101:Vh,102:64,106:66,107:Vi,108:Vj,109:Vk,110:Vl,111:Vm,112:65,113:67,124:Vn,125:Vo,126:Vp,127:Vq,128:Vr,129:Vs,130:Vt,131:55,132:56,133:Vu,134:Vv},{16:167,29:V5},{16:116,23:V3,29:V5,45:32,46:36,47:37,48:38,49:39,50:Vc,51:Vd,52:52,53:51,54:50,55:30,56:Ve,60:Vf,63:140,81:168,83:43,85:53,88:57,90:60,93:61,98:62,99:63,100:Vg,101:Vh,102:64,106:66,107:Vi,108:Vj,109:Vk,110:Vl,111:Vm,112:65,113:67,124:Vn,125:Vo,126:Vp,127:Vq,128:Vr,129:Vs,130:Vt,131:55,132:56,133:Vu,134:Vv},{16:116,23:V3,29:V5,45:32,46:36,47:37,48:38,49:39,50:Vc,51:Vd,52:52,53:51,54:50,55:169,56:Ve,60:Vf,124:Vn,125:Vo,126:Vp,127:Vq,128:Vr,129:Vs,130:Vt,131:55,132:56,133:Vu,134:Vv},{16:116,23:V3,29:V5,45:32,46:36,47:37,48:38,49:39,50:Vc,51:Vd,52:52,53:51,54:50,55:30,56:Ve,60:Vf,63:140,83:170,85:53,88:57,90:60,93:61,98:62,99:63,100:Vg,101:Vh,102:64,106:66,107:Vi,108:Vj,109:Vk,110:Vl,111:Vm,112:65,113:67,124:Vn,125:Vo,126:Vp,127:Vq,128:Vr,129:Vs,130:Vt,131:55,132:56,133:Vu,134:Vv},o([2,145],V81),{25:[1,171],77:VA},{25:VR,53:172,57:VR,59:VR,64:VR,66:VR,67:VR,68:VR,69:VR,70:VR,71:VR,72:VR,73:VR,74:VR,75:VR,76:VR,77:VR,80:VR,82:VR,84:VR,86:VR,89:VR,91:VR,92:VR,94:VR,95:VR,96:VR,97:VR,100:VR,101:VR,103:VR,104:VR,105:VR,107:VR,108:VR,115:VR,116:VR,117:VR,118:VR,119:VR,121:VR,131:55,132:56,133:Vu,134:Vv},o(Vx,VB),{87:[1,173]},{2:V91,18:V91,23:V91,25:V91,28:V91,29:V91,50:V91,51:V91,56:V91,57:V91,58:V91,59:V91,60:V91,64:V91,66:V91,67:V91,68:V91,69:V91,70:V91,71:V91,72:V91,73:V91,74:V91,75:V91,76:V91,77:V91,80:V91,82:V91,84:V91,86:V91,89:V91,91:V91,92:V91,94:V91,95:V91,96:V91,97:V91,100:V91,101:V91,103:V91,104:V91,105:V91,107:V91,108:V91,109:V91,110:V91,111:V91,115:V91,116:V91,117:V91,118:V91,119:V91,121:[1,174],124:V91,125:V91,126:V91,127:V91,128:V91,129:V91,130:V91,133:V91,134:V91},{16:116,23:V3,29:V5,45:32,46:36,47:37,48:38,49:39,50:Vc,51:Vd,52:52,53:51,54:50,55:30,56:Ve,60:Vf,63:140,88:175,90:60,93:61,98:62,99:63,100:Vg,101:Vh,102:64,106:66,107:Vi,108:Vj,109:Vk,110:Vl,111:Vm,112:65,113:67,124:Vn,125:Vo,126:Vp,127:Vq,128:Vr,129:Vs,130:Vt,131:55,132:56,133:Vu,134:Vv},{16:116,23:V3,29:V5,45:32,46:36,47:37,48:38,49:39,50:Vc,51:Vd,52:52,53:51,54:50,55:30,56:Ve,60:Vf,63:140,90:176,93:61,98:62,99:63,100:Vg,101:Vh,102:64,106:66,107:Vi,108:Vj,109:Vk,110:Vl,111:Vm,112:65,113:67,124:Vn,125:Vo,126:Vp,127:Vq,128:Vr,129:Vs,130:Vt,131:55,132:56,133:Vu,134:Vv},{16:116,23:V3,29:V5,45:32,46:36,47:37,48:38,49:39,50:Vc,51:Vd,52:52,53:51,54:50,55:30,56:Ve,60:Vf,63:140,90:177,93:61,98:62,99:63,100:Vg,101:Vh,102:64,106:66,107:Vi,108:Vj,109:Vk,110:Vl,111:Vm,112:65,113:67,124:Vn,125:Vo,126:Vp,127:Vq,128:Vr,129:Vs,130:Vt,131:55,132:56,133:Vu,134:Vv},{16:116,23:V3,29:V5,45:32,46:36,47:37,48:38,49:39,50:Vc,51:Vd,52:52,53:51,54:50,55:30,56:Ve,60:Vf,63:140,93:178,98:62,99:63,100:Vg,101:Vh,102:64,106:66,107:Vi,108:Vj,109:Vk,110:Vl,111:Vm,112:65,113:67,124:Vn,125:Vo,126:Vp,127:Vq,128:Vr,129:Vs,130:Vt,131:55,132:56,133:Vu,134:Vv},{16:116,23:V3,29:V5,45:32,46:36,47:37,48:38,49:39,50:Vc,51:Vd,52:52,53:51,54:50,55:30,56:Ve,60:Vf,63:140,93:179,98:62,99:63,100:Vg,101:Vh,102:64,106:66,107:Vi,108:Vj,109:Vk,110:Vl,111:Vm,112:65,113:67,124:Vn,125:Vo,126:Vp,127:Vq,128:Vr,129:Vs,130:Vt,131:55,132:56,133:Vu,134:Vv},{16:116,23:V3,29:V5,45:32,46:36,47:37,48:38,49:39,50:Vc,51:Vd,52:52,53:51,54:50,55:30,56:Ve,60:Vf,63:140,93:180,98:62,99:63,100:Vg,101:Vh,102:64,106:66,107:Vi,108:Vj,109:Vk,110:Vl,111:Vm,112:65,113:67,124:Vn,125:Vo,126:Vp,127:Vq,128:Vr,129:Vs,130:Vt,131:55,132:56,133:Vu,134:Vv},{16:116,23:V3,29:V5,45:32,46:36,47:37,48:38,49:39,50:Vc,51:Vd,52:52,53:51,54:50,55:30,56:Ve,60:Vf,63:140,93:181,98:62,99:63,100:Vg,101:Vh,102:64,106:66,107:Vi,108:Vj,109:Vk,110:Vl,111:Vm,112:65,113:67,124:Vn,125:Vo,126:Vp,127:Vq,128:Vr,129:Vs,130:Vt,131:55,132:56,133:Vu,134:Vv},{16:116,23:V3,29:V5,45:32,46:36,47:37,48:38,49:39,50:Vc,51:Vd,52:52,53:51,54:50,55:30,56:Ve,60:Vf,63:140,99:182,100:Vg,101:Vh,102:64,106:66,107:Vi,108:Vj,109:Vk,110:Vl,111:Vm,112:65,113:67,124:Vn,125:Vo,126:Vp,127:Vq,128:Vr,129:Vs,130:Vt,131:55,132:56,133:Vu,134:Vv},{16:116,23:V3,29:V5,45:32,46:36,47:37,48:38,49:39,50:Vc,51:Vd,52:52,53:51,54:50,55:30,56:Ve,60:Vf,63:140,99:183,100:Vg,101:Vh,102:64,106:66,107:Vi,108:Vj,109:Vk,110:Vl,111:Vm,112:65,113:67,124:Vn,125:Vo,126:Vp,127:Vq,128:Vr,129:Vs,130:Vt,131:55,132:56,133:Vu,134:Vv},{16:116,23:V3,29:V5,45:32,46:36,47:37,48:38,49:39,50:Vc,51:Vd,52:52,53:51,54:50,55:30,56:Ve,60:Vf,63:140,100:Vg,101:Vh,102:184,106:66,107:Vi,108:Vj,109:Vk,110:Vl,111:Vm,112:65,113:67,124:Vn,125:Vo,126:Vp,127:Vq,128:Vr,129:Vs,130:Vt,131:55,132:56,133:Vu,134:Vv},{16:116,23:V3,29:V5,45:32,46:36,47:37,48:38,49:39,50:Vc,51:Vd,52:52,53:51,54:50,55:30,56:Ve,60:Vf,63:140,100:Vg,101:Vh,102:185,106:66,107:Vi,108:Vj,109:Vk,110:Vl,111:Vm,112:65,113:67,124:Vn,125:Vo,126:Vp,127:Vq,128:Vr,129:Vs,130:Vt,131:55,132:56,133:Vu,134:Vv},{16:116,23:V3,29:V5,45:32,46:36,47:37,48:38,49:39,50:Vc,51:Vd,52:52,53:51,54:50,55:30,56:Ve,60:Vf,63:140,100:Vg,101:Vh,102:186,106:66,107:Vi,108:Vj,109:Vk,110:Vl,111:Vm,112:65,113:67,124:Vn,125:Vo,126:Vp,127:Vq,128:Vr,129:Vs,130:Vt,131:55,132:56,133:Vu,134:Vv},o([2,111],V51),o([2,112],V51),{16:116,23:V3,29:V5,45:32,46:36,47:37,48:38,49:39,50:Vc,51:Vd,52:52,53:51,54:50,55:30,56:Ve,60:Vf,63:187,124:Vn,125:Vo,126:Vp,127:Vq,128:Vr,129:Vs,130:Vt,131:55,132:56,133:Vu,134:Vv},o([2,116],Va1),o([2,117],Va1),o([2,118],Va1),o([2,119],Va1),o([2,120],Va1),o([2,101],V51),o(VD,Vb1),o([2,102],V51),o([2,103],V51),o([2,104],V51),o([2,105],V51),o([2,106],V51),o([2,107],V51),o([2,11],Vw),o([2,139],[18,23,29,50,51,124,125,126,127,128,129,130,133,134]),o([2,12],[5,19,21,22,23,26,27,29,30,31,32,33,35,36,37,42,44,50,51,56,60,100,101,107,108,109,110,111,124,125,126,127,128,129,130,133,134]),o([2,13],[19,21,22,23,27,29,30,31,32,33,35,37,42,44,50,51,56,60,100,101,107,108,109,110,111,124,125,126,127,128,129,130,133,134]),{25:[1,188],77:VA},{25:[1,189],77:VA},{28:[1,190],77:VA},o([2,19],Vw),o([2,20],Vw),o([2,23],Vw),o([2,24],Vw),o([2,27],Vw),o([2,28],Vw),{25:[1,191],77:VA},{7:192,19:V1},o([2,73],VC),o([2,59],VC),o([2,60],VC),{2:Vc1,23:Vc1,25:Vc1,28:Vc1,29:Vc1,50:Vc1,51:Vc1,56:Vc1,58:Vc1,60:Vc1,77:Vc1,80:Vc1,82:VJ,100:Vc1,101:Vc1,107:Vc1,108:Vc1,109:Vc1,110:Vc1,111:Vc1,124:Vc1,125:Vc1,126:Vc1,127:Vc1,128:Vc1,129:Vc1,130:Vc1,133:Vc1,134:Vc1},{58:[1,193],77:VA},o([2,56],VK),{2:Vd1,23:Vd1,25:Vd1,28:Vd1,29:Vd1,50:Vd1,51:Vd1,56:Vd1,58:Vd1,60:Vd1,77:Vd1,80:Vd1,82:Vd1,84:VM,100:Vd1,101:Vd1,107:Vd1,108:Vd1,109:Vd1,110:Vd1,111:Vd1,124:Vd1,125:Vd1,126:Vd1,127:Vd1,128:Vd1,129:Vd1,130:Vd1,133:Vd1,134:Vd1},{25:[1,194],57:VG,59:VH},{2:Ve1,23:Ve1,25:Ve1,28:Ve1,29:Ve1,50:Ve1,51:Ve1,56:Ve1,58:Ve1,60:Ve1,77:Ve1,80:Ve1,82:Ve1,84:Ve1,86:VP,100:Ve1,101:Ve1,107:Ve1,108:Ve1,109:Ve1,110:Ve1,111:Ve1,124:Ve1,125:Ve1,126:Ve1,127:Ve1,128:Ve1,129:Ve1,130:Ve1,133:Ve1,134:Ve1},o([2,46],VB),{53:195,131:55,132:56,133:Vu,134:Vv},o([2,82],[2,23,25,28,29,50,51,56,58,60,77,80,82,84,86,100,101,107,108,109,110,111,124,125,126,127,128,129,130,133,134]),o([2,146],V81),{2:Vf1,23:Vf1,25:Vf1,28:Vf1,29:Vf1,50:Vf1,51:Vf1,56:Vf1,58:Vf1,60:Vf1,77:Vf1,80:Vf1,82:Vf1,84:Vf1,86:Vf1,89:Vf1,91:VU,92:VV,100:Vf1,101:Vf1,107:Vf1,108:Vf1,109:Vf1,110:Vf1,111:Vf1,124:Vf1,125:Vf1,126:Vf1,127:Vf1,128:Vf1,129:Vf1,130:Vf1,133:Vf1,134:Vf1},{2:Vg1,23:Vg1,25:Vg1,28:Vg1,29:Vg1,50:Vg1,51:Vg1,56:Vg1,58:Vg1,60:Vg1,77:Vg1,80:Vg1,82:Vg1,84:Vg1,86:Vg1,89:Vg1,91:Vg1,92:Vg1,94:VX,95:VY,96:VZ,97:V_,100:Vg1,101:Vg1,107:Vg1,108:Vg1,109:Vg1,110:Vg1,111:Vg1,124:Vg1,125:Vg1,126:Vg1,127:Vg1,128:Vg1,129:Vg1,130:Vg1,133:Vg1,134:Vg1},{2:Vh1,23:Vh1,25:Vh1,28:Vh1,29:Vh1,50:Vh1,51:Vh1,56:Vh1,58:Vh1,60:Vh1,77:Vh1,80:Vh1,82:Vh1,84:Vh1,86:Vh1,89:Vh1,91:Vh1,92:Vh1,94:VX,95:VY,96:VZ,97:V_,100:Vh1,101:Vh1,107:Vh1,108:Vh1,109:Vh1,110:Vh1,111:Vh1,124:Vh1,125:Vh1,126:Vh1,127:Vh1,128:Vh1,129:Vh1,130:Vh1,133:Vh1,134:Vh1},o([2,89],V$),o([2,90],V$),o([2,91],V$),o([2,92],V$),{2:Vi1,23:Vi1,25:Vi1,28:Vi1,29:Vi1,50:Vi1,51:Vi1,56:Vi1,58:Vi1,60:Vi1,77:Vi1,80:Vi1,82:Vi1,84:Vi1,86:Vi1,89:Vi1,91:Vi1,92:Vi1,94:Vi1,95:Vi1,96:Vi1,97:Vi1,100:Vi1,101:Vi1,103:V21,104:V31,105:V41,107:Vi1,108:Vi1,109:Vi1,110:Vi1,111:Vi1,124:Vi1,125:Vi1,126:Vi1,127:Vi1,128:Vi1,129:Vi1,130:Vi1,133:Vi1,134:Vi1},{2:Vj1,23:Vj1,25:Vj1,28:Vj1,29:Vj1,50:Vj1,51:Vj1,56:Vj1,58:Vj1,60:Vj1,77:Vj1,80:Vj1,82:Vj1,84:Vj1,86:Vj1,89:Vj1,91:Vj1,92:Vj1,94:Vj1,95:Vj1,96:Vj1,97:Vj1,100:Vj1,101:Vj1,103:V21,104:V31,105:V41,107:Vj1,108:Vj1,109:Vj1,110:Vj1,111:Vj1,124:Vj1,125:Vj1,126:Vj1,127:Vj1,128:Vj1,129:Vj1,130:Vj1,133:Vj1,134:Vj1},o([2,98],V51),o([2,99],V51),o([2,100],V51),o([2,114],Vb1),{6:196,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,19:V1,22:V2,23:V3,24:24,27:V4,29:V5,30:V6,31:V7,32:V8,33:V9,35:Va,37:Vb,45:32,46:36,47:37,48:38,49:39,50:Vc,51:Vd,52:52,53:51,54:50,55:30,56:Ve,60:Vf,61:26,62:27,63:28,78:29,79:31,81:35,83:43,85:53,88:57,90:60,93:61,98:62,99:63,100:Vg,101:Vh,102:64,106:66,107:Vi,108:Vj,109:Vk,110:Vl,111:Vm,112:65,113:67,124:Vn,125:Vo,126:Vp,127:Vq,128:Vr,129:Vs,130:Vt,131:55,132:56,133:Vu,134:Vv},{6:197,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,19:V1,22:V2,23:V3,24:24,27:V4,29:V5,30:V6,31:V7,32:V8,33:V9,35:Va,37:Vb,45:32,46:36,47:37,48:38,49:39,50:Vc,51:Vd,52:52,53:51,54:50,55:30,56:Ve,60:Vf,61:26,62:27,63:28,78:29,79:31,81:35,83:43,85:53,88:57,90:60,93:61,98:62,99:63,100:Vg,101:Vh,102:64,106:66,107:Vi,108:Vj,109:Vk,110:Vl,111:Vm,112:65,113:67,124:Vn,125:Vo,126:Vp,127:Vq,128:Vr,129:Vs,130:Vt,131:55,132:56,133:Vu,134:Vv},{16:116,23:V3,24:198,29:V5,45:32,46:36,47:37,48:38,49:39,50:Vc,51:Vd,52:52,53:51,54:50,55:30,56:Ve,60:Vf,61:26,62:27,63:28,78:29,79:31,81:35,83:43,85:53,88:57,90:60,93:61,98:62,99:63,100:Vg,101:Vh,102:64,106:66,107:Vi,108:Vj,109:Vk,110:Vl,111:Vm,112:65,113:67,124:Vn,125:Vo,126:Vp,127:Vq,128:Vr,129:Vs,130:Vt,131:55,132:56,133:Vu,134:Vv},{19:[1,200],38:199},o([2,31],Vw),o([2,55],VK),o([2,57],VK),{25:[1,201]},{5:Vk1,19:Vk1,21:Vk1,22:Vk1,23:Vk1,26:[1,202],27:Vk1,29:Vk1,30:Vk1,31:Vk1,32:Vk1,33:Vk1,35:Vk1,37:Vk1,42:Vk1,44:Vk1,50:Vk1,51:Vk1,56:Vk1,60:Vk1,100:Vk1,101:Vk1,107:Vk1,108:Vk1,109:Vk1,110:Vk1,111:Vk1,124:Vk1,125:Vk1,126:Vk1,127:Vk1,128:Vk1,129:Vk1,130:Vk1,133:Vk1,134:Vk1},o([2,29],Vw),{28:[1,203],77:VA},o([2,32],Vw),{21:Vl1,39:204,42:Vl1,44:Vl1},o([2,50],VB),{6:205,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,19:V1,22:V2,23:V3,24:24,27:V4,29:V5,30:V6,31:V7,32:V8,33:V9,35:Va,37:Vb,45:32,46:36,47:37,48:38,49:39,50:Vc,51:Vd,52:52,53:51,54:50,55:30,56:Ve,60:Vf,61:26,62:27,63:28,78:29,79:31,81:35,83:43,85:53,88:57,90:60,93:61,98:62,99:63,100:Vg,101:Vh,102:64,106:66,107:Vi,108:Vj,109:Vk,110:Vl,111:Vm,112:65,113:67,124:Vn,125:Vo,126:Vp,127:Vq,128:Vr,129:Vs,130:Vt,131:55,132:56,133:Vu,134:Vv},{23:Vm1,25:Vm1,29:Vm1,34:206,50:Vm1,51:Vm1,56:Vm1,60:Vm1,100:Vm1,101:Vm1,107:Vm1,108:Vm1,109:Vm1,110:Vm1,111:Vm1,124:Vm1,125:Vm1,126:Vm1,127:Vm1,128:Vm1,129:Vm1,130:Vm1,133:Vm1,134:Vm1},{21:[1,207],40:208,41:209,42:Vn1,44:[1,210]},o([2,16],Vw),{16:116,23:V3,24:213,25:[1,212],29:V5,45:32,46:36,47:37,48:38,49:39,50:Vc,51:Vd,52:52,53:51,54:50,55:30,56:Ve,60:Vf,61:26,62:27,63:28,78:29,79:31,81:35,83:43,85:53,88:57,90:60,93:61,98:62,99:63,100:Vg,101:Vh,102:64,106:66,107:Vi,108:Vj,109:Vk,110:Vl,111:Vm,112:65,113:67,124:Vn,125:Vo,126:Vp,127:Vq,128:Vr,129:Vs,130:Vt,131:55,132:56,133:Vu,134:Vv},o([2,33],Vw),{21:Vl1,39:214,42:Vl1},o([2,35],[21,42,44]),{18:[1,215]},{16:219,29:V5,43:216,54:218,130:Vt,131:217,134:Vv},{6:220,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,19:V1,22:V2,23:V3,24:24,27:V4,29:V5,30:V6,31:V7,32:V8,33:V9,35:Va,37:Vb,45:32,46:36,47:37,48:38,49:39,50:Vc,51:Vd,52:52,53:51,54:50,55:30,56:Ve,60:Vf,61:26,62:27,63:28,78:29,79:31,81:35,83:43,85:53,88:57,90:60,93:61,98:62,99:63,100:Vg,101:Vh,102:64,106:66,107:Vi,108:Vj,109:Vk,110:Vl,111:Vm,112:65,113:67,124:Vn,125:Vo,126:Vp,127:Vq,128:Vr,129:Vs,130:Vt,131:55,132:56,133:Vu,134:Vv},{23:Vo1,25:Vo1,29:Vo1,50:Vo1,51:Vo1,56:Vo1,60:Vo1,77:VA,100:Vo1,101:Vo1,107:Vo1,108:Vo1,109:Vo1,110:Vo1,111:Vo1,124:Vo1,125:Vo1,126:Vo1,127:Vo1,128:Vo1,129:Vo1,130:Vo1,133:Vo1,134:Vo1},{21:[1,221],41:209,42:Vn1},{19:Vz,20:222,21:Vz,22:Vz,23:Vz,27:Vz,29:Vz,30:Vz,31:Vz,32:Vz,33:Vz,35:Vz,37:Vz,42:Vz,50:Vz,51:Vz,56:Vz,60:Vz,100:Vz,101:Vz,107:Vz,108:Vz,109:Vz,110:Vz,111:Vz,124:Vz,125:Vz,126:Vz,127:Vz,128:Vz,129:Vz,130:Vz,133:Vz,134:Vz},{18:[1,223]},{18:[2,142]},{18:[2,143]},{18:[2,144]},o([2,30],Vw),o([2,34],Vw),{6:150,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,19:V1,21:Vp1,22:V2,23:V3,24:24,27:V4,29:V5,30:V6,31:V7,32:V8,33:V9,35:Va,37:Vb,42:Vp1,45:32,46:36,47:37,48:38,49:39,50:Vc,51:Vd,52:52,53:51,54:50,55:30,56:Ve,60:Vf,61:26,62:27,63:28,78:29,79:31,81:35,83:43,85:53,88:57,90:60,93:61,98:62,99:63,100:Vg,101:Vh,102:64,106:66,107:Vi,108:Vj,109:Vk,110:Vl,111:Vm,112:65,113:67,124:Vn,125:Vo,126:Vp,127:Vq,128:Vr,129:Vs,130:Vt,131:55,132:56,133:Vu,134:Vv},{19:Vz,20:224,21:Vz,22:Vz,23:Vz,27:Vz,29:Vz,30:Vz,31:Vz,32:Vz,33:Vz,35:Vz,37:Vz,42:Vz,44:Vz,50:Vz,51:Vz,56:Vz,60:Vz,100:Vz,101:Vz,107:Vz,108:Vz,109:Vz,110:Vz,111:Vz,124:Vz,125:Vz,126:Vz,127:Vz,128:Vz,129:Vz,130:Vz,133:Vz,134:Vz},{6:150,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,19:V1,21:Vq1,22:V2,23:V3,24:24,27:V4,29:V5,30:V6,31:V7,32:V8,33:V9,35:Va,37:Vb,42:Vq1,44:Vq1,45:32,46:36,47:37,48:38,49:39,50:Vc,51:Vd,52:52,53:51,54:50,55:30,56:Ve,60:Vf,61:26,62:27,63:28,78:29,79:31,81:35,83:43,85:53,88:57,90:60,93:61,98:62,99:63,100:Vg,101:Vh,102:64,106:66,107:Vi,108:Vj,109:Vk,110:Vl,111:Vm,112:65,113:67,124:Vn,125:Vo,126:Vp,127:Vq,128:Vr,129:Vs,130:Vt,131:55,132:56,133:Vu,134:Vv}],
defaultActions: {3:[2,1],217:[2,142],218:[2,143],219:[2,144]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    function lex() {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

  var ast = require('./lib/ast'),

  Program = ast.Program,
  ThreadStatement = ast.ThreadStatement,
  IfStatement = ast.IfStatement,
  CompoundStatement = ast.CompoundStatement,
  StatementList = ast.StatementList,

  ProcedureStmt = ast.ProcedureStmt,
  BlockStmt   = ast.BlockStmt,
  LoopStmt    = ast.LoopStmt,
  MuLoopStmt  = ast.MuLoopStmt,
  NumberLit   = ast.NumberLit,
  BooleanLit  = ast.BooleanLit,
  OutputExpr  = ast.OutputExpr,
  Identifier  = ast.Identifier,
  CellExpr    = ast.CellExpr,
  PlusExpr    = ast.PlusExpr,
  TimesExpr   = ast.TimesExpr,
  ApplyExpr   = ast.ApplyExpr,
  LessCond    = ast.LessCond,
  GreaterCond   = ast.GreaterCond,
  GreaterCond   = ast.GreaterCond,
  EqualCond   = ast.EqualCond,
  CompoundCond  = ast.CompoundCond,
  AssignStmt  = ast.AssignStmt,
  IfThenStmt  = ast.IfThenStmt,
  QuitStmt    = ast.QuitStmt,
  AbortStmt   = ast.AbortStmt;


/* Begin Parser Customization Methods */
var _originalParseMethod = parser.parse;

parser.parse = function(source, args) {
    parser.wasNewLine = false;
    parser.newLine = false;
    parser.restricted = false;

    return _originalParseMethod.call(this, source);
};

// parser.parseError = function(str, hash) {
//     //		alert(JSON.stringify(hash) + "\n\n\n" + parser.newLine + "\n" + parser.wasNewLine + "\n\n" + hash.expected.indexOf("';'"));
//     if (!((hash.expected && hash.expected.indexOf("';'") >= 0) && (hash.token === "}" || hash.token === "EOF" || hash.token === "BR++" || hash.token === "BR--" || parser.newLine || parser.wasNewLine))) {
//         throw new SyntaxError(str);
//     }
// };
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:this.begin('COMMENT');
break;
case 1:/* consume */
break;
case 2:this.begin('INITIAL');
break;
case 3:
                                    if (yy_.yytext.match(/\r|\n/)) {
                                        parser.newLine = true;
                                    }

                                    if (parser.restricted && parser.newLine) {
                                        this.unput(yy_.yytext);
                                        parser.restricted = false;
                                        return ";";
                                    }
                                
break;
case 4:
                                    if (yy_.yytext.match(/\r|\n/)) {
                                        parser.newLine = true;
                                    }

                                    if (parser.restricted && parser.newLine) {
                                        this.unput(yy_.yytext);
                                        parser.restricted = false;
                                        return ";";
                                    }
                                
break;
case 5:
                                    if (yy_.yytext.match(/\r|\n/)) {
                                        parser.newLine = true;
                                    }

                                    if (parser.restricted && parser.newLine) {
                                        this.unput(yy_.yytext);
                                        parser.restricted = false;
                                        return ";";
                                    }
                                
break;
case 6:parser.restricted = false; return 130;
break;
case 7:parser.restricted = false; return 130;
break;
case 8:parser.restricted = true; return 30
break;
case 9:return 42
break;
case 10:return 36
break;
case 11:parser.restricted = true; return 27
break;
case 12:return 44
break;
case 13:return 26
break;
case 14:parser.retricted = true; return 31 // like javascript return
break;
case 15:return 22
break;
case 16:return 33
break;
case 17:return 37
break;
case 18:return 35
break;
case 19:return 32
break;
case 20:return 126
break;
case 21:return 125
break;
case 22:return 124
break;
case 23:return 127
break;
case 24:parser.restricted = false; return 128 // like javascript this
break;
case 25:return 129
break;
case 26:parser.restricted = false; return 'TRUE'
break;
case 27:parser.restricted = false; return 'FALSE'
break;
case 28:parser.restricted = false; return 50
break;
case 29:parser.restricted = false; return 51
break;
case 30:return 115
break;
case 31:return 116
break;
case 32:return 117
break;
case 33:return 118
break;
case 34:return 119
break;
case 35:return 111
break;
case 36:parser.restricted = false; return 29
break;
case 37:parser.restricted = false; return 134
break;
case 38:parser.restricted = false; return 133
break;
case 39:return 121
break;
case 40:return 69
break;
case 41:return 70
break;
case 42:return 66
break;
case 43:return 67
break;
case 44:return 68
break;
case 45:parser.restricted = false; return 107
break;
case 46:parser.restricted = false; return 108
break;
case 47:return 82
break;
case 48:return 80
break;
case 49:return 86
break;
case 50:return 91
break;
case 51:return 92
break;
case 52:return 96
break;
case 53:return 97
break;
case 54:return 94
break;
case 55:return 95
break;
case 56:return 89
break;
case 57:return 84
break;
case 58:return 100
break;
case 59:return 101
break;
case 60:return 103
break;
case 61:return 104
break;
case 62:return 105
break;
case 63:return 60
break;
case 64:return 59
break;
case 65:parser.restricted = false; return 57
break;
case 66:return 58
break;
case 67:parser.restricted = false; return 23
break;
case 68:return 25
break;
case 69:parser.restricted = false; return 19
break;
case 70:return 21
break;
case 71:return 18
break;
case 72:parser.restricted = false; return 28
break;
case 73:return 77
break;
case 74:return 64
break;
case 75:parser.restricted = false; return 110
break;
case 76:parser.restricted = false; return 109
break;
case 77:return 5
break;
case 78:return 'ERROR'
break;
case 79:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\/\/)/,/^(?:[^\n]*)/,/^(?:\n)/,/^(?:\s+)/,/^(?:\/\*(.|\r|\n)*?\*\/)/,/^(?:\/\/.*($|\r\n|\r|\n))/,/^(?:(').*('))/,/^(?:(").*("))/,/^(?:break)/,/^(?:case)/,/^(?:catch)/,/^(?:continue)/,/^(?:default)/,/^(?:else)/,/^(?:end)/,/^(?:if)/,/^(?:for)/,/^(?:switch)/,/^(?:try)/,/^(?:while)/,/^(?:local)/,/^(?:level)/,/^(?:game)/,/^(?:parm)/,/^(?:self)/,/^(?:group)/,/^(?:true)/,/^(?:false)/,/^(?:NULL)/,/^(?:NIL)/,/^(?:thread)/,/^(?:waitthread)/,/^(?:exec)/,/^(?:waitexec)/,/^(?:waittill)/,/^(?:isalive)/,/^(?:(([$A-Za-z_])(([$A-Za-z_])|[0-9])*))/,/^(?:(-?(([1-9][0-9]+|[0-9]))+))/,/^(?:((-?(([1-9][0-9]+|[0-9]))+)+\.(([1-9][0-9]+|[0-9]))+))/,/^(?:::)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:%=)/,/^(?:\+\+)/,/^(?:--)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\^)/,/^(?:==)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:&)/,/^(?:\|)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\$)/,/^(?:\.)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?::)/,/^(?:;)/,/^(?:,)/,/^(?:=)/,/^(?:!)/,/^(?:~)/,/^(?:$)/,/^(?:.)/,/^(?:.)/],
conditions: {"COMMENT":{"rules":[1,2],"inclusive":false},"INITIAL":{"rules":[0,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79],"inclusive":true}}
});
/* Begin Lexer Customization Methods */
var _originalLexMethod = lexer.lex;

lexer.lex = function() {
    parser.wasNewLine = parser.newLine;
    parser.newLine = false;

    return _originalLexMethod.call(this);
};
/* End Lexer Customization Methods */;
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}