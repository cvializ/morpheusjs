/* parser generated by jison 0.4.14 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(v,a,l,r){for(l=a.length,r={};l--;r[a[l]]=v);return r},V0=[2,3],V1=[1,17],V2=[1,18],V3=[1,19],V4=[1,44],V5=[1,22],V6=[1,28],V7=[1,23],V8=[1,24],V9=[1,20],Va=[1,21],Vb=[1,26],Vc=[1,25],Vd=[1,48],Ve=[1,36],Vf=[1,37],Vg=[1,75],Vh=[1,76],Vi=[1,73],Vj=[1,74],Vk=[1,77],Vl=[1,78],Vm=[1,79],Vn=[1,46],Vo=[1,47],Vp=[1,49],Vq=[1,50],Vr=[1,51],Vs=[1,60],Vt=[1,61],Vu=[1,57],Vv=[1,64],Vw=[1,63],Vx=[5,19,22,23,24,28,29,30,31,32,33,35,38,49,58,61,101,102,108,109,110,111,112,125,126,127,128,129,134,135,136,139,140],Vy=[5,19,21,22,23,24,27,28,29,30,31,32,33,35,38,43,46,49,58,61,101,102,108,109,110,111,112,125,126,127,128,129,134,135,136,139,140],Vz=[2,19],VA=[1,97],VB=[2,134],VC=[2,47],VD=[2,22,24,26,29,49,58,60,61,78,101,102,108,109,110,111,112,125,126,127,128,129,134,135,136,139,140],VE=[2,117],VF=[2,78],VG=[2,119],VH=[1,114],VI=[1,113],VJ=[2,79],VK=[1,115],VL=[2,22,24,26,29,49,50,58,59,60,61,65,67,68,69,70,71,72,73,74,75,76,77,78,81,83,85,87,90,92,93,95,96,97,98,101,102,104,105,106,108,109,110,111,112,116,117,118,119,120,125,126,127,128,129,134,135,136,139,140],VM=[2,81],VN=[1,117],VO=[2,53],VP=[2,54],VQ=[1,122],VR=[2,83],VS=[1,123],VT=[2,22,24,26,29,49,50,58,59,60,61,65,67,68,69,70,71,72,73,74,75,76,77,78,81,83,85,87,90,92,93,95,96,97,98,101,102,104,105,106,108,109,110,111,112,116,117,118,119,120,122,125,126,127,128,129,134,135,136,139,140],VU=[2,136],VV=[2,85],VW=[2,22,24,26,29,45,49,50,58,59,60,61,65,67,68,69,70,71,72,73,74,75,76,77,78,81,83,85,87,90,92,93,95,96,97,98,101,102,104,105,106,108,109,110,111,112,116,117,118,119,120,122,125,126,127,128,129,134,135,136,139,140],VX=[2,87],VY=[1,125],VZ=[1,126],V_=[2,89],V$=[1,127],V01=[1,128],V11=[1,129],V21=[1,130],V31=[2,22,24,26,29,49,58,60,61,78,81,83,85,87,90,92,93,95,96,97,98,101,102,108,109,110,111,112,125,126,127,128,129,134,135,136,139,140],V41=[2,97],V51=[2,98],V61=[1,133],V71=[1,134],V81=[1,135],V91=[2,22,24,26,29,49,58,60,61,78,81,83,85,87,90,92,93,95,96,97,98,101,102,104,105,106,108,109,110,111,112,125,126,127,128,129,134,135,136,139,140],Va1=[2,114],Vb1=[24,29,49,58,61,101,102,108,109,110,111,112,125,126,127,128,129,134,135,136,139,140],Vc1=[24,29,49,58,61,125,126,127,128,129,134,135,136,139,140],Vd1=[2,22,24,26,29,49,58,60,61,78,81,83,85,87,90,92,93,95,96,97,98,101,102,104,105,106,108,109,110,111,112,116,117,118,119,120,125,126,127,128,129,134,135,136,139,140],Ve1=[45,49],Vf1=[2,80],Vg1=[2,82],Vh1=[2,84],Vi1=[2,88],Vj1=[2,90],Vk1=[2,91],Vl1=[2,99],Vm1=[2,100],Vn1=[2,20],Vo1=[2,42],Vp1=[2,149],Vq1=[1,223],Vr1=[2,150],Vs1=[2,44],Vt1=[2,43];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"source_elements":4,"EOF":5,"source_element":6,"statement":7,"compound_statement":8,"empty_statement":9,"if_statement":10,"iteration_statement":11,"continue_statement":12,"break_statement":13,"return_statement":14,"switch_statement":15,"try_statement":16,"expression_statement":17,"labelled_statement":18,"{":19,"statement_list":20,"}":21,";":22,"IF":23,"(":24,"expression":25,")":26,"ELSE":27,"CONTINUE":28,"IDENTIFIER":29,"BREAK":30,"END":31,"WHILE":32,"FOR":33,"iteration_statement_repetition0":34,"TRY":35,"catch_clause":36,"CATCH":37,"SWITCH":38,"case_block":39,"case_clauses":40,"default_clause":41,"case_clause":42,"CASE":43,"case_clause_group0":44,":":45,"DEFAULT":46,"labelled_statement_arguments":47,"labelled_statement_argument":48,"LOCAL":49,".":50,"primary_expression":51,"builtin_vars":52,"identifier":53,"literal":54,"array_literal_constant":55,"vector_literal":56,"member_expression":57,"function_expression":58,"[":59,"]":60,"$":61,"assignment_expression":62,"conditional_expression":63,"lefthandside_expression":64,"=":65,"assignment_operator":66,"*=":67,"/=":68,"%=":69,"+=":70,"-=":71,"<<=":72,">>=":73,">>>=":74,"&=":75,"^=":76,"|=":77,",":78,"logical_or_expression":79,"logical_and_expression":80,"||":81,"bitwise_or_expression":82,"&&":83,"bitwise_xor_expression":84,"|":85,"bitwise_and_expression":86,"^":87,"bitwise_and_selection":88,"equality_expression":89,"&":90,"relational_expression":91,"==":92,"!=":93,"shift_expression":94,"<":95,">":96,"<=":97,">=":98,"additive_expression":99,"multiplicative_expression":100,"+":101,"-":102,"unary_expression":103,"*":104,"/":105,"%":106,"unary_expr":107,"++":108,"--":109,"~":110,"!":111,"ISALIVE":112,"postfix_expression":113,"call_expression":114,"call_literal":115,"THREAD":116,"WAITTHREAD":117,"EXEC":118,"WAITEXEC":119,"WAITTILL":120,"func_prim_expr":121,"::":122,"prim_expr":123,"nonident_prim_expr":124,"GAME":125,"LEVEL":126,"PARM":127,"SELF":128,"GROUP":129,"string_literal":130,"numeric_literal":131,"null_literal":132,"nil_literal":133,"NULL":134,"NIL":135,"STRING":136,"integer":137,"float":138,"FLOAT":139,"INTEGER":140,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",19:"{",21:"}",22:";",23:"IF",24:"(",26:")",27:"ELSE",28:"CONTINUE",29:"IDENTIFIER",30:"BREAK",31:"END",32:"WHILE",33:"FOR",35:"TRY",37:"CATCH",38:"SWITCH",43:"CASE",45:":",46:"DEFAULT",49:"LOCAL",50:".",58:"function_expression",59:"[",60:"]",61:"$",65:"=",67:"*=",68:"/=",69:"%=",70:"+=",71:"-=",72:"<<=",73:">>=",74:">>>=",75:"&=",76:"^=",77:"|=",78:",",81:"||",83:"&&",85:"|",87:"^",88:"bitwise_and_selection",90:"&",92:"==",93:"!=",95:"<",96:">",97:"<=",98:">=",101:"+",102:"-",104:"*",105:"/",106:"%",108:"++",109:"--",110:"~",111:"!",112:"ISALIVE",116:"THREAD",117:"WAITTHREAD",118:"EXEC",119:"WAITEXEC",120:"WAITTILL",122:"::",123:"prim_expr",124:"nonident_prim_expr",125:"GAME",126:"LEVEL",127:"PARM",128:"SELF",129:"GROUP",134:"NULL",135:"NIL",136:"STRING",139:"FLOAT",140:"INTEGER"},
productions_: [0,[3,2],[4,2],[4,0],[6,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[8,3],[9,1],[20,2],[20,0],[10,5],[10,7],[12,2],[12,2],[12,3],[12,3],[13,2],[13,2],[13,3],[13,3],[14,2],[14,2],[14,3],[14,3],[11,5],[11,9],[16,3],[36,5],[15,5],[39,3],[39,5],[40,2],[40,0],[42,4],[41,3],[18,3],[47,2],[47,0],[48,3],[17,2],[17,2],[51,1],[51,1],[51,1],[51,1],[51,1],[51,3],[57,1],[57,1],[57,4],[57,3],[57,4],[62,1],[62,3],[62,3],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[25,1],[25,3],[63,1],[79,1],[79,3],[80,1],[80,3],[82,1],[82,3],[84,1],[84,3],[86,1],[86,3],[89,1],[89,3],[89,3],[91,1],[91,3],[91,3],[91,3],[91,3],[94,1],[99,1],[99,3],[99,3],[100,1],[100,3],[100,3],[100,3],[107,2],[107,2],[107,2],[107,2],[107,2],[107,2],[107,2],[103,1],[103,1],[113,1],[113,2],[113,2],[114,1],[114,3],[64,1],[115,1],[115,1],[115,1],[115,1],[115,1],[121,2],[121,3],[121,3],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[53,1],[54,1],[54,1],[54,1],[54,1],[55,3],[55,3],[56,5],[132,1],[133,1],[130,1],[131,1],[131,1],[138,1],[137,1],[34,0],[34,2],[44,1],[44,1],[44,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
            this.$ = new ProgramNode($$[$0-1], createSourceLocation(null, _$[$0-1], _$[$0]));
            return this.$;
        
break;
case 2:
            this.$ = $$[$0-1].concat($$[$0]);
        
break;
case 3:
            this.$ = [];
        
break;
case 16:
            this.$ = new BlockStatementNode($$[$0-1], createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 17:
            return EmptyStatementNode(createSourceLocation(null, _$[$0], _$[$0]));
        
break;
case 18:
            this.$ = $$[$0-1].concat($$[$0]);
        
break;
case 19:
            this.$ = [];
        
break;
case 20:
            this.$ = new IfStatementNode($$[$0-2], $$[$0], null, createSourceLocation(null, _$[$0-4], _$[$0]));
        
break;
case 21:
            this.$ = new IfStatementNode($$[$0-4], $$[$0-2], $$[$0], createSourceLocation(null, _$[$0-6], _$[$0]));
        
break;
case 22:
            this.$ = new ContinueStatementNode(new IdentifierNode($$[$0], createSourceLocation(null, _$[$0], _$[$0])), createSourceLocation(null, _$[$0-1], _$[$0]));
        
break;
case 23:
            this.$ = new ContinueStatementNode(new IdentifierNode($$[$0], createSourceLocation(null, _$[$0], _$[$0])), createSourceLocation(null, _$[$0-1], _$[$01]));
        
break;
case 24:
            this.$ = new ContinueStatementNode(null, createSourceLocation(null, _$[$0-2], _$[$0-2]));
        
break;
case 25:
            this.$ = new ContinueStatementNode(null, createSourceLocation(null, _$[$0-2], _$[$0-1]));
        
break;
case 26:
            this.$ = new BreakStatementNode(new IdentifierNode($$[$0], createSourceLocation(null, _$[$0], _$[$0])), createSourceLocation(null, _$[$0-1], _$[$0]));
        
break;
case 27:
            this.$ = new BreakStatementNode(new IdentifierNode($$[$0], createSourceLocation(null, _$[$0], _$[$0])), createSourceLocation(null, _$[$0-1], _$[$01]));
        
break;
case 28:
            this.$ = new BreakStatementNode(null, createSourceLocation(null, _$[$0-2], _$[$0-2]));
        
break;
case 29:
            this.$ = new BreakStatementNode(null, createSourceLocation(null, _$[$0-2], _$[$0-1]));
        
break;
case 30:
            this.$ = new ReturnStatementNode(null, createSourceLocation(null, _$[$0-1], _$[$0]));
        
break;
case 31:
            this.$ = new ReturnStatementNode(null, createSourceLocation(null, _$[$0-1], _$[$0-1]));
        
break;
case 32:
            this.$ = new ReturnStatementNode($$[$0-1], createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 33:
            this.$ = new ReturnStatementNode($$[$0-1], createSourceLocation(null, _$[$0-2], _$[$0-1]));
        
break;
case 34:
            this.$ = new WhileStatementNode($$[$0-2], $$[$0], createSourceLocation(null, _$[$0-4], _$[$0]));
        
break;
case 35:
            this.$ = new ForStatementNode($$[$0-6], $$[$0-4], $$[$0-2], $$[$0], createSourceLocation(null, _$[$0-8], _$[$0]));
        
break;
case 36:
            this.$ = new TryStatementNode($$[$0-1], $$[$0], null, createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 37:
            this.$ = new CatchClauseNode(new IdentifierNode($$[$0-2], createSourceLocation(null, _$[$0-2], _$[$0-2])), $$[$0], createSourceLocation(null, _$[$0-4], _$[$0]));
        
break;
case 38:
            this.$ = new SwitchStatementNode($$[$0-2], $$[$0], createSourceLocation(null, _$[$0-4], _$[$0]));
        
break;
case 39:
            this.$ = $$[$0-1];
        
break;
case 40:
            this.$ = $$[$0-3].concat($$[$0-2]).concat($$[$0-1]);
        
break;
case 41:
            this.$ = $$[$0-1].concat($$[$0]);
        
break;
case 42:
            this.$ = [];
        
break;
case 43:
            this.$ = new SwitchCaseNode($$[$0-2], $$[$0], createSourceLocation(null, _$[$0-3], _$[$0]));
        
break;
case 44:
            this.$ = new SwitchCaseNode(null, $$[$0], createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 45:
            this.$ = new LabeledStatementNode(new IdentifierNode($$[$0-2], createSourceLocation(null, _$[$0-2], _$[$0-2])), $$[$0], createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 46:
            this.$ = $$[$0-1].concat($$[$0]);
        
break;
case 47:
            this.$ = [];
        
break;
case 48:
            // TODO: is this ok?
            this.$ = new MemberExpressionNode($$[$0-2], $$[$0], false, createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 49:
            this.$ = new ExpressionStatementNode($$[$0-1], createSourceLocation(null, _$[$0-1], _$[$0]));
        
break;
case 50:
            this.$ = new ExpressionStatementNode($$[$0-1], createSourceLocation(null, _$[$0-1], _$[$0-1]));
        
break;
case 51:
            this.$ = new ThisExpressionNode(createSourceLocation(null, _$[$0], _$[$0]));
        
break;
case 52:
            this.$ = new IdentifierNode($$[$0], createSourceLocation(null, _$[$0], _$[$0]));
        
break;
case 56:
            this.$ = $$[$0-1];
        
break;
case 59:
            this.$ = new MemberExpressionNode($$[$0-3], $$[$0-1], true, createSourceLocation(null, _$[$0-3], _$[$0]));
        
break;
case 60:
            this.$ = new MemberExpressionNode($$[$0-2], $$[$0], false, createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 61:
            this.$ = new MemberExpressionNode($$[$0-3], $$[$0-1], false, createSourceLocation(null, _$[$0-3], _$[$0]));
        
break;
case 63:
            this.$ = new AssignmentExpressionNode('=', $$[$0-2], $$[$0], createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 64:
            this.$ = new AssignmentExpressionNode($$[$0-1], $$[$0-2], $$[$0], createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 80:
            this.$ = new LogicalExpressionNode("||", $$[$0-2], $$[$0], createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 82:
            this.$ = new LogicalExpressionNode("&&", $$[$0-2], $$[$0], createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 84:
            this.$ = new BinaryExpressionNode("|", $$[$0-2], $$[$0], createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 86:
            this.$ = new BinaryExpressionNode("^", $$[$0-2], $$[$0], createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 88:
            this.$ = new BinaryExpressionNode("&", $$[$0-2], $$[$0], createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 90:
            this.$ = new BinaryExpressionNode("==", $$[$0-2], $$[$0], createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 91:
            this.$ = new BinaryExpressionNode("!=", $$[$0-2], $$[$0], createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 93:
            this.$ = new BinaryExpressionNode("<", $$[$0-2], $$[$0], createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 94:
            this.$ = new BinaryExpressionNode(">", $$[$0-2], $$[$0], createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 95:
            this.$ = new BinaryExpressionNode("<=", $$[$0-2], $$[$0], createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 96:
            this.$ = new BinaryExpressionNode(">=", $$[$0-2], $$[$0], createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 99:
            this.$ = new BinaryExpressionNode("+", $$[$0-2], $$[$0], createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 100:
            this.$ = new BinaryExpressionNode("-", $$[$0-2], $$[$0], createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 102:
        this.$ = new BinaryExpressionNode("*", $$[$0-2], $$[$0], createSourceLocation(null, _$[$0-2], _$[$0]));
    
break;
case 103:
        this.$ = new BinaryExpressionNode("/", $$[$0-2], $$[$0], createSourceLocation(null, _$[$0-2], _$[$0]));
    
break;
case 104:
        this.$ = new BinaryExpressionNode("%", $$[$0-2], $$[$0], createSourceLocation(null, _$[$0-2], _$[$0]));
    
break;
case 105:
            this.$ = new UpdateExpressionNode("++", $$[$0], false, createSourceLocation(null, _$[$0-1], _$[$0]));
        
break;
case 106:
            this.$ = new UpdateExpressionNode("--", $$[$0], false, createSourceLocation(null, _$[$0-1], _$[$0]));
        
break;
case 107:
            this.$ = new UnaryExpressionNode("+", true, $$[$0], createSourceLocation(null, _$[$0-1], _$[$0]));
        
break;
case 108:
            this.$ = new UnaryExpressionNode("-", true, $$[$0], createSourceLocation(null, _$[$0-1], _$[$0]));
        
break;
case 109:
            this.$ = new UnaryExpressionNode("~", true, $$[$0], createSourceLocation(null, _$[$0-1], _$[$0]));
        
break;
case 110:
            this.$ = new UnaryExpressionNode("!", true, $$[$0], createSourceLocation(null, _$[$0-1], _$[$0]));
        
break;
case 111:
            this.$ = new UnaryExpressionNode("ISALIVE", true, $$[$0], createSourceLocation(null, _$[$0-1], _$[$0]));
        
break;
case 115:
            this.$ = new UpdateExpressionNode("++", $$[$0-1], false, createSourceLocation(null, _$[$0-1], _$[$0]));
        
break;
case 116:
            this.$ = new UpdateExpressionNode("--", $$[$0-1], false, createSourceLocation(null, _$[$0-1], _$[$0]));
        
break;
case 134:
            this.$ = new IdentifierNode($$[$0], createSourceLocation(null, _$[$0], _$[$0]));
        
break;
case 139:
            this.$ = new ConstantArrayLiteralNode([$$[$0-2], $$[$0]], createSourceLocation(null, _$[$0-2], _$[$0]));
        
break;
case 140:
            $$[$0-2].elements.concat($$[$0]);
            $$[$0-2].loc = createSourceLocation(null, _$[$0-2], _$[$0]);
            this.$ = $$[$0-2];
        
break;
case 141:
            this.$ = new LiteralNode([$$[$0-3], $$[$0-2], $$[$0-1]], createSourceLocation(null, _$[$0-4], _$[$0]));
        
break;
case 142:
            this.$ = new LiteralNode(null, createSourceLocation(null, _$[$0], _$[$0]));
        
break;
case 143:
            this.$ = new LiteralNode(undefined, createSourceLocation(null, _$[$0], _$[$0]));
        
break;
case 144:
            this.$ = new LiteralNode($$[$0], createSourceLocation(null, _$[$0], _$[$0]));
        
break;
case 145:
            this.$ = new LiteralNode(+($$[$0]), createSourceLocation(null, _$[$0], _$[$0]));
        
break;
case 146:
            this.$ = new LiteralNode(+($$[$0]), createSourceLocation(null, _$[$0], _$[$0]));
        
break;
case 149:this.$ = [];
break;
case 150:$$[$0-1].push($$[$0]);
break;
}
},
table: [{3:1,4:2,5:V0,19:V0,22:V0,23:V0,24:V0,28:V0,29:V0,30:V0,31:V0,32:V0,33:V0,35:V0,38:V0,49:V0,58:V0,61:V0,101:V0,102:V0,108:V0,109:V0,110:V0,111:V0,112:V0,125:V0,126:V0,127:V0,128:V0,129:V0,134:V0,135:V0,136:V0,139:V0,140:V0},{1:[3]},{5:[1,3],6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:V1,22:V2,23:V3,24:V4,25:27,28:V5,29:V6,30:V7,31:V8,32:V9,33:Va,35:Vb,38:Vc,49:Vd,51:35,52:39,53:40,54:41,55:42,56:43,57:33,58:Ve,61:Vf,62:29,63:30,64:31,79:32,80:34,82:38,84:45,86:56,89:62,91:65,94:66,99:67,100:68,101:Vg,102:Vh,103:69,107:71,108:Vi,109:Vj,110:Vk,111:Vl,112:Vm,113:70,114:72,125:Vn,126:Vo,127:Vp,128:Vq,129:Vr,130:52,131:53,132:54,133:55,134:Vs,135:Vt,136:Vu,137:58,138:59,139:Vv,140:Vw},{1:[2,1]},o([2,2],Vx),o([2,4],Vx),o([2,5],Vy),o([2,6],Vy),o([2,7],Vy),o([2,8],Vy),o([2,9],Vy),o([2,10],Vy),o([2,11],Vy),o([2,12],Vy),o([2,13],Vy),o([2,14],Vy),o([2,15],Vy),{19:Vz,20:80,21:Vz,22:Vz,23:Vz,24:Vz,28:Vz,29:Vz,30:Vz,31:Vz,32:Vz,33:Vz,35:Vz,38:Vz,49:Vz,58:Vz,61:Vz,101:Vz,102:Vz,108:Vz,109:Vz,110:Vz,111:Vz,112:Vz,125:Vz,126:Vz,127:Vz,128:Vz,129:Vz,134:Vz,135:Vz,136:Vz,139:Vz,140:Vz},o([2,17],Vy),{24:[1,81]},{24:[1,82]},{24:[1,83]},{2:[1,85],22:[1,84],29:[1,86]},{2:[1,88],22:[1,87],29:[1,89]},{2:[1,91],22:[1,90],29:[1,92]},{24:[1,93]},{8:94,19:V1},{2:[1,96],22:[1,95],78:VA},{2:VB,22:VB,45:VC,47:98,49:VC,50:VB,59:VB,65:VB,67:VB,68:VB,69:VB,70:VB,71:VB,72:VB,73:VB,74:VB,75:VB,76:VB,77:VB,78:VB,81:VB,83:VB,85:VB,87:VB,90:VB,92:VB,93:VB,95:VB,96:VB,97:VB,98:VB,101:VB,102:VB,104:VB,105:VB,106:VB,108:VB,109:VB,116:VB,117:VB,118:VB,119:VB,120:VB},o([2,76],VD),o([2,62],VD),{2:VE,22:VE,24:VE,26:VE,29:VE,49:VE,58:VE,60:VE,61:VE,65:[1,99],66:100,67:[1,101],68:[1,102],69:[1,103],70:[1,104],71:[1,105],72:[1,106],73:[1,107],74:[1,108],75:[1,109],76:[1,110],77:[1,111],78:VE,81:VE,83:VE,85:VE,87:VE,90:VE,92:VE,93:VE,95:VE,96:VE,97:VE,98:VE,101:VE,102:VE,104:VE,105:VE,106:VE,108:VE,109:VE,110:VE,111:VE,112:VE,116:VE,117:VE,118:VE,119:VE,120:VE,125:VE,126:VE,127:VE,128:VE,129:VE,134:VE,135:VE,136:VE,139:VE,140:VE},{2:VF,22:VF,24:VF,26:VF,29:VF,49:VF,58:VF,60:VF,61:VF,78:VF,81:[1,112],101:VF,102:VF,108:VF,109:VF,110:VF,111:VF,112:VF,125:VF,126:VF,127:VF,128:VF,129:VF,134:VF,135:VF,136:VF,139:VF,140:VF},{2:VG,22:VG,24:VG,26:VG,29:VG,49:VG,50:VH,58:VG,59:VI,60:VG,61:VG,65:VG,67:VG,68:VG,69:VG,70:VG,71:VG,72:VG,73:VG,74:VG,75:VG,76:VG,77:VG,78:VG,81:VG,83:VG,85:VG,87:VG,90:VG,92:VG,93:VG,95:VG,96:VG,97:VG,98:VG,101:VG,102:VG,104:VG,105:VG,106:VG,108:VG,109:VG,110:VG,111:VG,112:VG,116:VG,117:VG,118:VG,119:VG,120:VG,125:VG,126:VG,127:VG,128:VG,129:VG,134:VG,135:VG,136:VG,139:VG,140:VG},{2:VJ,22:VJ,24:VJ,26:VJ,29:VJ,49:VJ,58:VJ,60:VJ,61:VJ,78:VJ,81:VJ,83:VK,101:VJ,102:VJ,108:VJ,109:VJ,110:VJ,111:VJ,112:VJ,125:VJ,126:VJ,127:VJ,128:VJ,129:VJ,134:VJ,135:VJ,136:VJ,139:VJ,140:VJ},o([2,57],VL),o([2,58],VL),{24:[1,116]},{2:VM,22:VM,24:VM,26:VM,29:VM,49:VM,58:VM,60:VM,61:VM,78:VM,81:VM,83:VM,85:VN,101:VM,102:VM,108:VM,109:VM,110:VM,111:VM,112:VM,125:VM,126:VM,127:VM,128:VM,129:VM,134:VM,135:VM,136:VM,139:VM,140:VM},o([2,51],VL),o([2,52],VL),{2:VO,22:VO,24:VO,26:VO,29:VO,49:VO,50:VO,58:VO,59:VO,60:VO,61:VO,65:VO,67:VO,68:VO,69:VO,70:VO,71:VO,72:VO,73:VO,74:VO,75:VO,76:VO,77:VO,78:VO,81:VO,83:VO,85:VO,87:VO,90:VO,92:VO,93:VO,95:VO,96:VO,97:VO,98:VO,101:VO,102:VO,104:VO,105:VO,106:VO,108:VO,109:VO,110:VO,111:VO,112:VO,116:VO,117:VO,118:VO,119:VO,120:VO,122:[1,118],125:VO,126:VO,127:VO,128:VO,129:VO,134:VO,135:VO,136:VO,139:VO,140:VO},{2:VP,22:VP,24:VP,26:VP,29:VP,49:VP,50:VP,58:VP,59:VP,60:VP,61:VP,65:VP,67:VP,68:VP,69:VP,70:VP,71:VP,72:VP,73:VP,74:VP,75:VP,76:VP,77:VP,78:VP,81:VP,83:VP,85:VP,87:VP,90:VP,92:VP,93:VP,95:VP,96:VP,97:VP,98:VP,101:VP,102:VP,104:VP,105:VP,106:VP,108:VP,109:VP,110:VP,111:VP,112:VP,116:VP,117:VP,118:VP,119:VP,120:VP,122:[1,119],125:VP,126:VP,127:VP,128:VP,129:VP,134:VP,135:VP,136:VP,139:VP,140:VP},o([2,55],VL),{24:V4,25:120,29:VQ,49:Vd,51:35,52:39,53:40,54:41,55:42,56:43,57:33,58:Ve,61:Vf,62:29,63:30,64:31,79:32,80:34,82:38,84:45,86:56,89:62,91:65,94:66,99:67,100:68,101:Vg,102:Vh,103:69,107:71,108:Vi,109:Vj,110:Vk,111:Vl,112:Vm,113:70,114:72,125:Vn,126:Vo,127:Vp,128:Vq,129:Vr,130:52,131:121,132:54,133:55,134:Vs,135:Vt,136:Vu,137:58,138:59,139:Vv,140:Vw},{2:VR,22:VR,24:VR,26:VR,29:VR,49:VR,58:VR,60:VR,61:VR,78:VR,81:VR,83:VR,85:VR,87:VS,101:VR,102:VR,108:VR,109:VR,110:VR,111:VR,112:VR,125:VR,126:VR,127:VR,128:VR,129:VR,134:VR,135:VR,136:VR,139:VR,140:VR},o([2,128],VL),o([2,129],VL),o([2,130],VL),o([2,131],VL),o([2,132],VL),o([2,133],VL),o([2,135],VT),o(VU,VT),o([2,137],VT),o([2,138],VT),{2:VV,22:VV,24:VV,26:VV,29:VV,49:VV,58:VV,60:VV,61:VV,78:VV,81:VV,83:VV,85:VV,87:VV,90:[1,124],101:VV,102:VV,108:VV,109:VV,110:VV,111:VV,112:VV,125:VV,126:VV,127:VV,128:VV,129:VV,134:VV,135:VV,136:VV,139:VV,140:VV},o([2,144],VW),o([2,145],VT),o([2,146],VT),o([2,142],VT),o([2,143],VT),{2:VX,22:VX,24:VX,26:VX,29:VX,49:VX,58:VX,60:VX,61:VX,78:VX,81:VX,83:VX,85:VX,87:VX,90:VX,92:VY,93:VZ,101:VX,102:VX,108:VX,109:VX,110:VX,111:VX,112:VX,125:VX,126:VX,127:VX,128:VX,129:VX,134:VX,135:VX,136:VX,139:VX,140:VX},o([2,148],VW),o([2,147],VT),{2:V_,22:V_,24:V_,26:V_,29:V_,49:V_,58:V_,60:V_,61:V_,78:V_,81:V_,83:V_,85:V_,87:V_,90:V_,92:V_,93:V_,95:V$,96:V01,97:V11,98:V21,101:V_,102:V_,108:V_,109:V_,110:V_,111:V_,112:V_,125:V_,126:V_,127:V_,128:V_,129:V_,134:V_,135:V_,136:V_,139:V_,140:V_},o([2,92],V31),{2:V41,22:V41,24:V41,26:V41,29:V41,49:V41,58:V41,60:V41,61:V41,78:V41,81:V41,83:V41,85:V41,87:V41,90:V41,92:V41,93:V41,95:V41,96:V41,97:V41,98:V41,101:[1,131],102:[1,132],108:V41,109:V41,110:V41,111:V41,112:V41,125:V41,126:V41,127:V41,128:V41,129:V41,134:V41,135:V41,136:V41,139:V41,140:V41},{2:V51,22:V51,24:V51,26:V51,29:V51,49:V51,58:V51,60:V51,61:V51,78:V51,81:V51,83:V51,85:V51,87:V51,90:V51,92:V51,93:V51,95:V51,96:V51,97:V51,98:V51,101:V51,102:V51,104:V61,105:V71,106:V81,108:V51,109:V51,110:V51,111:V51,112:V51,125:V51,126:V51,127:V51,128:V51,129:V51,134:V51,135:V51,136:V51,139:V51,140:V51},o([2,101],V91),o([2,112],V91),o([2,113],V91),{2:Va1,22:Va1,24:Va1,26:Va1,29:Va1,49:Va1,58:Va1,60:Va1,61:Va1,78:Va1,81:Va1,83:Va1,85:Va1,87:Va1,90:Va1,92:Va1,93:Va1,95:Va1,96:Va1,97:Va1,98:Va1,101:Va1,102:Va1,104:Va1,105:Va1,106:Va1,108:[1,136],109:[1,137],110:Va1,111:Va1,112:Va1,115:138,116:[1,139],117:[1,140],118:[1,141],119:[1,142],120:[1,143],125:Va1,126:Va1,127:Va1,128:Va1,129:Va1,134:Va1,135:Va1,136:Va1,139:Va1,140:Va1},{24:V4,29:VQ,49:Vd,51:35,52:39,53:40,54:41,55:42,56:43,57:33,58:Ve,61:Vf,64:145,101:Vg,102:Vh,103:144,107:71,108:Vi,109:Vj,110:Vk,111:Vl,112:Vm,113:70,114:72,125:Vn,126:Vo,127:Vp,128:Vq,129:Vr,130:52,131:53,132:54,133:55,134:Vs,135:Vt,136:Vu,137:58,138:59,139:Vv,140:Vw},{24:V4,29:VQ,49:Vd,51:35,52:39,53:40,54:41,55:42,56:43,57:33,58:Ve,61:Vf,64:145,101:Vg,102:Vh,103:146,107:71,108:Vi,109:Vj,110:Vk,111:Vl,112:Vm,113:70,114:72,125:Vn,126:Vo,127:Vp,128:Vq,129:Vr,130:52,131:53,132:54,133:55,134:Vs,135:Vt,136:Vu,137:58,138:59,139:Vv,140:Vw},{24:V4,29:VQ,49:Vd,51:35,52:39,53:40,54:41,55:42,56:43,57:33,58:Ve,61:Vf,64:145,101:Vg,102:Vh,103:147,107:71,108:Vi,109:Vj,110:Vk,111:Vl,112:Vm,113:70,114:72,125:Vn,126:Vo,127:Vp,128:Vq,129:Vr,130:52,131:53,132:54,133:55,134:Vs,135:Vt,136:Vu,137:58,138:59,139:Vv,140:Vw},{24:V4,29:VQ,49:Vd,51:35,52:39,53:40,54:41,55:42,56:43,57:33,58:Ve,61:Vf,64:145,101:Vg,102:Vh,103:148,107:71,108:Vi,109:Vj,110:Vk,111:Vl,112:Vm,113:70,114:72,125:Vn,126:Vo,127:Vp,128:Vq,129:Vr,130:52,131:53,132:54,133:55,134:Vs,135:Vt,136:Vu,137:58,138:59,139:Vv,140:Vw},{24:V4,29:VQ,49:Vd,51:35,52:39,53:40,54:41,55:42,56:43,57:33,58:Ve,61:Vf,64:145,101:Vg,102:Vh,103:149,107:71,108:Vi,109:Vj,110:Vk,111:Vl,112:Vm,113:70,114:72,125:Vn,126:Vo,127:Vp,128:Vq,129:Vr,130:52,131:53,132:54,133:55,134:Vs,135:Vt,136:Vu,137:58,138:59,139:Vv,140:Vw},{24:V4,29:VQ,49:Vd,51:35,52:39,53:40,54:41,55:42,56:43,57:33,58:Ve,61:Vf,64:145,101:Vg,102:Vh,103:150,107:71,108:Vi,109:Vj,110:Vk,111:Vl,112:Vm,113:70,114:72,125:Vn,126:Vo,127:Vp,128:Vq,129:Vr,130:52,131:53,132:54,133:55,134:Vs,135:Vt,136:Vu,137:58,138:59,139:Vv,140:Vw},{24:V4,29:VQ,49:Vd,51:35,52:39,53:40,54:41,55:42,56:43,57:33,58:Ve,61:Vf,64:145,101:Vg,102:Vh,103:151,107:71,108:Vi,109:Vj,110:Vk,111:Vl,112:Vm,113:70,114:72,125:Vn,126:Vo,127:Vp,128:Vq,129:Vr,130:52,131:53,132:54,133:55,134:Vs,135:Vt,136:Vu,137:58,138:59,139:Vv,140:Vw},{7:153,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:V1,21:[1,152],22:V2,23:V3,24:V4,25:27,28:V5,29:V6,30:V7,31:V8,32:V9,33:Va,35:Vb,38:Vc,49:Vd,51:35,52:39,53:40,54:41,55:42,56:43,57:33,58:Ve,61:Vf,62:29,63:30,64:31,79:32,80:34,82:38,84:45,86:56,89:62,91:65,94:66,99:67,100:68,101:Vg,102:Vh,103:69,107:71,108:Vi,109:Vj,110:Vk,111:Vl,112:Vm,113:70,114:72,125:Vn,126:Vo,127:Vp,128:Vq,129:Vr,130:52,131:53,132:54,133:55,134:Vs,135:Vt,136:Vu,137:58,138:59,139:Vv,140:Vw},{24:V4,25:154,29:VQ,49:Vd,51:35,52:39,53:40,54:41,55:42,56:43,57:33,58:Ve,61:Vf,62:29,63:30,64:31,79:32,80:34,82:38,84:45,86:56,89:62,91:65,94:66,99:67,100:68,101:Vg,102:Vh,103:69,107:71,108:Vi,109:Vj,110:Vk,111:Vl,112:Vm,113:70,114:72,125:Vn,126:Vo,127:Vp,128:Vq,129:Vr,130:52,131:53,132:54,133:55,134:Vs,135:Vt,136:Vu,137:58,138:59,139:Vv,140:Vw},{24:V4,25:155,29:VQ,49:Vd,51:35,52:39,53:40,54:41,55:42,56:43,57:33,58:Ve,61:Vf,62:29,63:30,64:31,79:32,80:34,82:38,84:45,86:56,89:62,91:65,94:66,99:67,100:68,101:Vg,102:Vh,103:69,107:71,108:Vi,109:Vj,110:Vk,111:Vl,112:Vm,113:70,114:72,125:Vn,126:Vo,127:Vp,128:Vq,129:Vr,130:52,131:53,132:54,133:55,134:Vs,135:Vt,136:Vu,137:58,138:59,139:Vv,140:Vw},{24:V4,25:156,29:VQ,49:Vd,51:35,52:39,53:40,54:41,55:42,56:43,57:33,58:Ve,61:Vf,62:29,63:30,64:31,79:32,80:34,82:38,84:45,86:56,89:62,91:65,94:66,99:67,100:68,101:Vg,102:Vh,103:69,107:71,108:Vi,109:Vj,110:Vk,111:Vl,112:Vm,113:70,114:72,125:Vn,126:Vo,127:Vp,128:Vq,129:Vr,130:52,131:53,132:54,133:55,134:Vs,135:Vt,136:Vu,137:58,138:59,139:Vv,140:Vw},o([2,22],Vy),o([2,23],Vy),{2:[1,158],22:[1,157]},o([2,26],Vy),o([2,27],Vy),{2:[1,160],22:[1,159]},o([2,30],Vy),o([2,31],Vy),{2:[1,162],22:[1,161]},{24:V4,25:163,29:VQ,49:Vd,51:35,52:39,53:40,54:41,55:42,56:43,57:33,58:Ve,61:Vf,62:29,63:30,64:31,79:32,80:34,82:38,84:45,86:56,89:62,91:65,94:66,99:67,100:68,101:Vg,102:Vh,103:69,107:71,108:Vi,109:Vj,110:Vk,111:Vl,112:Vm,113:70,114:72,125:Vn,126:Vo,127:Vp,128:Vq,129:Vr,130:52,131:53,132:54,133:55,134:Vs,135:Vt,136:Vu,137:58,138:59,139:Vv,140:Vw},{36:164,37:[1,165]},o([2,49],Vy),o([2,50],Vy),{24:V4,29:VQ,49:Vd,51:35,52:39,53:40,54:41,55:42,56:43,57:33,58:Ve,61:Vf,62:166,63:30,64:31,79:32,80:34,82:38,84:45,86:56,89:62,91:65,94:66,99:67,100:68,101:Vg,102:Vh,103:69,107:71,108:Vi,109:Vj,110:Vk,111:Vl,112:Vm,113:70,114:72,125:Vn,126:Vo,127:Vp,128:Vq,129:Vr,130:52,131:53,132:54,133:55,134:Vs,135:Vt,136:Vu,137:58,138:59,139:Vv,140:Vw},{45:[1,167],48:168,49:[1,169]},{24:V4,29:VQ,49:Vd,51:35,52:39,53:40,54:41,55:42,56:43,57:33,58:Ve,61:Vf,62:170,63:30,64:31,79:32,80:34,82:38,84:45,86:56,89:62,91:65,94:66,99:67,100:68,101:Vg,102:Vh,103:69,107:71,108:Vi,109:Vj,110:Vk,111:Vl,112:Vm,113:70,114:72,125:Vn,126:Vo,127:Vp,128:Vq,129:Vr,130:52,131:53,132:54,133:55,134:Vs,135:Vt,136:Vu,137:58,138:59,139:Vv,140:Vw},{24:V4,29:VQ,49:Vd,51:35,52:39,53:40,54:41,55:42,56:43,57:33,58:Ve,61:Vf,62:171,63:30,64:31,79:32,80:34,82:38,84:45,86:56,89:62,91:65,94:66,99:67,100:68,101:Vg,102:Vh,103:69,107:71,108:Vi,109:Vj,110:Vk,111:Vl,112:Vm,113:70,114:72,125:Vn,126:Vo,127:Vp,128:Vq,129:Vr,130:52,131:53,132:54,133:55,134:Vs,135:Vt,136:Vu,137:58,138:59,139:Vv,140:Vw},o([2,65],Vb1),o([2,66],Vb1),o([2,67],Vb1),o([2,68],Vb1),o([2,69],Vb1),o([2,70],Vb1),o([2,71],Vb1),o([2,72],Vb1),o([2,73],Vb1),o([2,74],Vb1),o([2,75],Vb1),{24:V4,29:VQ,49:Vd,51:35,52:39,53:40,54:41,55:42,56:43,57:33,58:Ve,61:Vf,64:145,80:172,82:38,84:45,86:56,89:62,91:65,94:66,99:67,100:68,101:Vg,102:Vh,103:69,107:71,108:Vi,109:Vj,110:Vk,111:Vl,112:Vm,113:70,114:72,125:Vn,126:Vo,127:Vp,128:Vq,129:Vr,130:52,131:53,132:54,133:55,134:Vs,135:Vt,136:Vu,137:58,138:59,139:Vv,140:Vw},{24:V4,25:173,29:VQ,49:Vd,51:35,52:39,53:40,54:41,55:42,56:43,57:33,58:Ve,61:Vf,62:29,63:30,64:31,79:32,80:34,82:38,84:45,86:56,89:62,91:65,94:66,99:67,100:68,101:Vg,102:Vh,103:69,107:71,108:Vi,109:Vj,110:Vk,111:Vl,112:Vm,113:70,114:72,125:Vn,126:Vo,127:Vp,128:Vq,129:Vr,130:52,131:53,132:54,133:55,134:Vs,135:Vt,136:Vu,137:58,138:59,139:Vv,140:Vw},{29:VQ,53:174},{24:V4,29:VQ,49:Vd,51:35,52:39,53:40,54:41,55:42,56:43,57:33,58:Ve,61:Vf,64:145,82:175,84:45,86:56,89:62,91:65,94:66,99:67,100:68,101:Vg,102:Vh,103:69,107:71,108:Vi,109:Vj,110:Vk,111:Vl,112:Vm,113:70,114:72,125:Vn,126:Vo,127:Vp,128:Vq,129:Vr,130:52,131:53,132:54,133:55,134:Vs,135:Vt,136:Vu,137:58,138:59,139:Vv,140:Vw},{24:V4,29:VQ,49:Vd,51:35,52:39,53:40,54:41,55:42,56:43,57:176,58:Ve,61:Vf,125:Vn,126:Vo,127:Vp,128:Vq,129:Vr,130:52,131:53,132:54,133:55,134:Vs,135:Vt,136:Vu,137:58,138:59,139:Vv,140:Vw},{24:V4,29:VQ,49:Vd,51:35,52:39,53:40,54:41,55:42,56:43,57:33,58:Ve,61:Vf,64:145,84:177,86:56,89:62,91:65,94:66,99:67,100:68,101:Vg,102:Vh,103:69,107:71,108:Vi,109:Vj,110:Vk,111:Vl,112:Vm,113:70,114:72,125:Vn,126:Vo,127:Vp,128:Vq,129:Vr,130:52,131:53,132:54,133:55,134:Vs,135:Vt,136:Vu,137:58,138:59,139:Vv,140:Vw},{54:178,130:52,131:53,132:54,133:55,134:Vs,135:Vt,136:Vu,137:58,138:59,139:Vv,140:Vw},{54:179,130:52,131:53,132:54,133:55,134:Vs,135:Vt,136:Vu,137:58,138:59,139:Vv,140:Vw},{26:[1,180],78:VA},{26:VU,50:VU,59:VU,65:VU,67:VU,68:VU,69:VU,70:VU,71:VU,72:VU,73:VU,74:VU,75:VU,76:VU,77:VU,78:VU,81:VU,83:VU,85:VU,87:VU,90:VU,92:VU,93:VU,95:VU,96:VU,97:VU,98:VU,101:VU,102:VU,104:VU,105:VU,106:VU,108:VU,109:VU,116:VU,117:VU,118:VU,119:VU,120:VU,122:VU,131:181,137:58,138:59,139:Vv,140:Vw},o(VB,[2,22,24,26,29,45,49,50,58,59,60,61,65,67,68,69,70,71,72,73,74,75,76,77,78,81,83,85,87,90,92,93,95,96,97,98,101,102,104,105,106,108,109,110,111,112,116,117,118,119,120,125,126,127,128,129,134,135,136,139,140]),{88:[1,182]},{24:V4,29:VQ,49:Vd,51:35,52:39,53:40,54:41,55:42,56:43,57:33,58:Ve,61:Vf,64:145,89:183,91:65,94:66,99:67,100:68,101:Vg,102:Vh,103:69,107:71,108:Vi,109:Vj,110:Vk,111:Vl,112:Vm,113:70,114:72,125:Vn,126:Vo,127:Vp,128:Vq,129:Vr,130:52,131:53,132:54,133:55,134:Vs,135:Vt,136:Vu,137:58,138:59,139:Vv,140:Vw},{24:V4,29:VQ,49:Vd,51:35,52:39,53:40,54:41,55:42,56:43,57:33,58:Ve,61:Vf,64:145,91:184,94:66,99:67,100:68,101:Vg,102:Vh,103:69,107:71,108:Vi,109:Vj,110:Vk,111:Vl,112:Vm,113:70,114:72,125:Vn,126:Vo,127:Vp,128:Vq,129:Vr,130:52,131:53,132:54,133:55,134:Vs,135:Vt,136:Vu,137:58,138:59,139:Vv,140:Vw},{24:V4,29:VQ,49:Vd,51:35,52:39,53:40,54:41,55:42,56:43,57:33,58:Ve,61:Vf,64:145,91:185,94:66,99:67,100:68,101:Vg,102:Vh,103:69,107:71,108:Vi,109:Vj,110:Vk,111:Vl,112:Vm,113:70,114:72,125:Vn,126:Vo,127:Vp,128:Vq,129:Vr,130:52,131:53,132:54,133:55,134:Vs,135:Vt,136:Vu,137:58,138:59,139:Vv,140:Vw},{24:V4,29:VQ,49:Vd,51:35,52:39,53:40,54:41,55:42,56:43,57:33,58:Ve,61:Vf,64:145,94:186,99:67,100:68,101:Vg,102:Vh,103:69,107:71,108:Vi,109:Vj,110:Vk,111:Vl,112:Vm,113:70,114:72,125:Vn,126:Vo,127:Vp,128:Vq,129:Vr,130:52,131:53,132:54,133:55,134:Vs,135:Vt,136:Vu,137:58,138:59,139:Vv,140:Vw},{24:V4,29:VQ,49:Vd,51:35,52:39,53:40,54:41,55:42,56:43,57:33,58:Ve,61:Vf,64:145,94:187,99:67,100:68,101:Vg,102:Vh,103:69,107:71,108:Vi,109:Vj,110:Vk,111:Vl,112:Vm,113:70,114:72,125:Vn,126:Vo,127:Vp,128:Vq,129:Vr,130:52,131:53,132:54,133:55,134:Vs,135:Vt,136:Vu,137:58,138:59,139:Vv,140:Vw},{24:V4,29:VQ,49:Vd,51:35,52:39,53:40,54:41,55:42,56:43,57:33,58:Ve,61:Vf,64:145,94:188,99:67,100:68,101:Vg,102:Vh,103:69,107:71,108:Vi,109:Vj,110:Vk,111:Vl,112:Vm,113:70,114:72,125:Vn,126:Vo,127:Vp,128:Vq,129:Vr,130:52,131:53,132:54,133:55,134:Vs,135:Vt,136:Vu,137:58,138:59,139:Vv,140:Vw},{24:V4,29:VQ,49:Vd,51:35,52:39,53:40,54:41,55:42,56:43,57:33,58:Ve,61:Vf,64:145,94:189,99:67,100:68,101:Vg,102:Vh,103:69,107:71,108:Vi,109:Vj,110:Vk,111:Vl,112:Vm,113:70,114:72,125:Vn,126:Vo,127:Vp,128:Vq,129:Vr,130:52,131:53,132:54,133:55,134:Vs,135:Vt,136:Vu,137:58,138:59,139:Vv,140:Vw},{24:V4,29:VQ,49:Vd,51:35,52:39,53:40,54:41,55:42,56:43,57:33,58:Ve,61:Vf,64:145,100:190,101:Vg,102:Vh,103:69,107:71,108:Vi,109:Vj,110:Vk,111:Vl,112:Vm,113:70,114:72,125:Vn,126:Vo,127:Vp,128:Vq,129:Vr,130:52,131:53,132:54,133:55,134:Vs,135:Vt,136:Vu,137:58,138:59,139:Vv,140:Vw},{24:V4,29:VQ,49:Vd,51:35,52:39,53:40,54:41,55:42,56:43,57:33,58:Ve,61:Vf,64:145,100:191,101:Vg,102:Vh,103:69,107:71,108:Vi,109:Vj,110:Vk,111:Vl,112:Vm,113:70,114:72,125:Vn,126:Vo,127:Vp,128:Vq,129:Vr,130:52,131:53,132:54,133:55,134:Vs,135:Vt,136:Vu,137:58,138:59,139:Vv,140:Vw},{24:V4,29:VQ,49:Vd,51:35,52:39,53:40,54:41,55:42,56:43,57:33,58:Ve,61:Vf,64:145,101:Vg,102:Vh,103:192,107:71,108:Vi,109:Vj,110:Vk,111:Vl,112:Vm,113:70,114:72,125:Vn,126:Vo,127:Vp,128:Vq,129:Vr,130:52,131:53,132:54,133:55,134:Vs,135:Vt,136:Vu,137:58,138:59,139:Vv,140:Vw},{24:V4,29:VQ,49:Vd,51:35,52:39,53:40,54:41,55:42,56:43,57:33,58:Ve,61:Vf,64:145,101:Vg,102:Vh,103:193,107:71,108:Vi,109:Vj,110:Vk,111:Vl,112:Vm,113:70,114:72,125:Vn,126:Vo,127:Vp,128:Vq,129:Vr,130:52,131:53,132:54,133:55,134:Vs,135:Vt,136:Vu,137:58,138:59,139:Vv,140:Vw},{24:V4,29:VQ,49:Vd,51:35,52:39,53:40,54:41,55:42,56:43,57:33,58:Ve,61:Vf,64:145,101:Vg,102:Vh,103:194,107:71,108:Vi,109:Vj,110:Vk,111:Vl,112:Vm,113:70,114:72,125:Vn,126:Vo,127:Vp,128:Vq,129:Vr,130:52,131:53,132:54,133:55,134:Vs,135:Vt,136:Vu,137:58,138:59,139:Vv,140:Vw},o([2,115],V91),o([2,116],V91),{24:V4,29:VQ,49:Vd,51:35,52:39,53:40,54:41,55:42,56:43,57:33,58:Ve,61:Vf,64:195,125:Vn,126:Vo,127:Vp,128:Vq,129:Vr,130:52,131:53,132:54,133:55,134:Vs,135:Vt,136:Vu,137:58,138:59,139:Vv,140:Vw},o([2,120],Vc1),o([2,121],Vc1),o([2,122],Vc1),o([2,123],Vc1),o([2,124],Vc1),o([2,105],V91),o(VE,Vd1),o([2,106],V91),o([2,107],V91),o([2,108],V91),o([2,109],V91),o([2,110],V91),o([2,111],V91),o([2,16],[5,19,21,22,23,24,27,28,29,30,31,32,33,35,37,38,43,46,49,58,61,101,102,108,109,110,111,112,125,126,127,128,129,134,135,136,139,140]),o([2,18],[19,21,22,23,24,28,29,30,31,32,33,35,38,43,46,49,58,61,101,102,108,109,110,111,112,125,126,127,128,129,134,135,136,139,140]),{26:[1,196],78:VA},{26:[1,197],78:VA},{22:[1,198],78:VA},o([2,24],Vy),o([2,25],Vy),o([2,28],Vy),o([2,29],Vy),o([2,32],Vy),o([2,33],Vy),{26:[1,199],78:VA},o([2,36],Vy),{24:[1,200]},o([2,77],VD),o([2,45],Vy),o([2,46],Ve1),{50:[1,201]},o([2,63],VD),o([2,64],VD),{2:Vf1,22:Vf1,24:Vf1,26:Vf1,29:Vf1,49:Vf1,58:Vf1,60:Vf1,61:Vf1,78:Vf1,81:Vf1,83:VK,101:Vf1,102:Vf1,108:Vf1,109:Vf1,110:Vf1,111:Vf1,112:Vf1,125:Vf1,126:Vf1,127:Vf1,128:Vf1,129:Vf1,134:Vf1,135:Vf1,136:Vf1,139:Vf1,140:Vf1},{60:[1,202],78:VA},o([2,60],VL),{2:Vg1,22:Vg1,24:Vg1,26:Vg1,29:Vg1,49:Vg1,58:Vg1,60:Vg1,61:Vg1,78:Vg1,81:Vg1,83:Vg1,85:VN,101:Vg1,102:Vg1,108:Vg1,109:Vg1,110:Vg1,111:Vg1,112:Vg1,125:Vg1,126:Vg1,127:Vg1,128:Vg1,129:Vg1,134:Vg1,135:Vg1,136:Vg1,139:Vg1,140:Vg1},{26:[1,203],50:VH,59:VI},{2:Vh1,22:Vh1,24:Vh1,26:Vh1,29:Vh1,49:Vh1,58:Vh1,60:Vh1,61:Vh1,78:Vh1,81:Vh1,83:Vh1,85:Vh1,87:VS,101:Vh1,102:Vh1,108:Vh1,109:Vh1,110:Vh1,111:Vh1,112:Vh1,125:Vh1,126:Vh1,127:Vh1,128:Vh1,129:Vh1,134:Vh1,135:Vh1,136:Vh1,139:Vh1,140:Vh1},o([2,139],VT),o([2,140],VT),o([2,56],VL),{131:204,137:58,138:59,139:Vv,140:Vw},o([2,86],[2,22,24,26,29,49,58,60,61,78,81,83,85,87,101,102,108,109,110,111,112,125,126,127,128,129,134,135,136,139,140]),{2:Vi1,22:Vi1,24:Vi1,26:Vi1,29:Vi1,49:Vi1,58:Vi1,60:Vi1,61:Vi1,78:Vi1,81:Vi1,83:Vi1,85:Vi1,87:Vi1,90:Vi1,92:VY,93:VZ,101:Vi1,102:Vi1,108:Vi1,109:Vi1,110:Vi1,111:Vi1,112:Vi1,125:Vi1,126:Vi1,127:Vi1,128:Vi1,129:Vi1,134:Vi1,135:Vi1,136:Vi1,139:Vi1,140:Vi1},{2:Vj1,22:Vj1,24:Vj1,26:Vj1,29:Vj1,49:Vj1,58:Vj1,60:Vj1,61:Vj1,78:Vj1,81:Vj1,83:Vj1,85:Vj1,87:Vj1,90:Vj1,92:Vj1,93:Vj1,95:V$,96:V01,97:V11,98:V21,101:Vj1,102:Vj1,108:Vj1,109:Vj1,110:Vj1,111:Vj1,112:Vj1,125:Vj1,126:Vj1,127:Vj1,128:Vj1,129:Vj1,134:Vj1,135:Vj1,136:Vj1,139:Vj1,140:Vj1},{2:Vk1,22:Vk1,24:Vk1,26:Vk1,29:Vk1,49:Vk1,58:Vk1,60:Vk1,61:Vk1,78:Vk1,81:Vk1,83:Vk1,85:Vk1,87:Vk1,90:Vk1,92:Vk1,93:Vk1,95:V$,96:V01,97:V11,98:V21,101:Vk1,102:Vk1,108:Vk1,109:Vk1,110:Vk1,111:Vk1,112:Vk1,125:Vk1,126:Vk1,127:Vk1,128:Vk1,129:Vk1,134:Vk1,135:Vk1,136:Vk1,139:Vk1,140:Vk1},o([2,93],V31),o([2,94],V31),o([2,95],V31),o([2,96],V31),{2:Vl1,22:Vl1,24:Vl1,26:Vl1,29:Vl1,49:Vl1,58:Vl1,60:Vl1,61:Vl1,78:Vl1,81:Vl1,83:Vl1,85:Vl1,87:Vl1,90:Vl1,92:Vl1,93:Vl1,95:Vl1,96:Vl1,97:Vl1,98:Vl1,101:Vl1,102:Vl1,104:V61,105:V71,106:V81,108:Vl1,109:Vl1,110:Vl1,111:Vl1,112:Vl1,125:Vl1,126:Vl1,127:Vl1,128:Vl1,129:Vl1,134:Vl1,135:Vl1,136:Vl1,139:Vl1,140:Vl1},{2:Vm1,22:Vm1,24:Vm1,26:Vm1,29:Vm1,49:Vm1,58:Vm1,60:Vm1,61:Vm1,78:Vm1,81:Vm1,83:Vm1,85:Vm1,87:Vm1,90:Vm1,92:Vm1,93:Vm1,95:Vm1,96:Vm1,97:Vm1,98:Vm1,101:Vm1,102:Vm1,104:V61,105:V71,106:V81,108:Vm1,109:Vm1,110:Vm1,111:Vm1,112:Vm1,125:Vm1,126:Vm1,127:Vm1,128:Vm1,129:Vm1,134:Vm1,135:Vm1,136:Vm1,139:Vm1,140:Vm1},o([2,102],V91),o([2,103],V91),o([2,104],V91),o([2,118],Vd1),{7:205,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:V1,22:V2,23:V3,24:V4,25:27,28:V5,29:V6,30:V7,31:V8,32:V9,33:Va,35:Vb,38:Vc,49:Vd,51:35,52:39,53:40,54:41,55:42,56:43,57:33,58:Ve,61:Vf,62:29,63:30,64:31,79:32,80:34,82:38,84:45,86:56,89:62,91:65,94:66,99:67,100:68,101:Vg,102:Vh,103:69,107:71,108:Vi,109:Vj,110:Vk,111:Vl,112:Vm,113:70,114:72,125:Vn,126:Vo,127:Vp,128:Vq,129:Vr,130:52,131:53,132:54,133:55,134:Vs,135:Vt,136:Vu,137:58,138:59,139:Vv,140:Vw},{7:206,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:V1,22:V2,23:V3,24:V4,25:27,28:V5,29:V6,30:V7,31:V8,32:V9,33:Va,35:Vb,38:Vc,49:Vd,51:35,52:39,53:40,54:41,55:42,56:43,57:33,58:Ve,61:Vf,62:29,63:30,64:31,79:32,80:34,82:38,84:45,86:56,89:62,91:65,94:66,99:67,100:68,101:Vg,102:Vh,103:69,107:71,108:Vi,109:Vj,110:Vk,111:Vl,112:Vm,113:70,114:72,125:Vn,126:Vo,127:Vp,128:Vq,129:Vr,130:52,131:53,132:54,133:55,134:Vs,135:Vt,136:Vu,137:58,138:59,139:Vv,140:Vw},{24:V4,25:207,29:VQ,49:Vd,51:35,52:39,53:40,54:41,55:42,56:43,57:33,58:Ve,61:Vf,62:29,63:30,64:31,79:32,80:34,82:38,84:45,86:56,89:62,91:65,94:66,99:67,100:68,101:Vg,102:Vh,103:69,107:71,108:Vi,109:Vj,110:Vk,111:Vl,112:Vm,113:70,114:72,125:Vn,126:Vo,127:Vp,128:Vq,129:Vr,130:52,131:53,132:54,133:55,134:Vs,135:Vt,136:Vu,137:58,138:59,139:Vv,140:Vw},{19:[1,209],39:208},{29:[1,210]},{29:[1,211]},o([2,59],VL),o([2,61],VL),{26:[1,212]},{5:Vn1,19:Vn1,21:Vn1,22:Vn1,23:Vn1,24:Vn1,27:[1,213],28:Vn1,29:Vn1,30:Vn1,31:Vn1,32:Vn1,33:Vn1,35:Vn1,38:Vn1,43:Vn1,46:Vn1,49:Vn1,58:Vn1,61:Vn1,101:Vn1,102:Vn1,108:Vn1,109:Vn1,110:Vn1,111:Vn1,112:Vn1,125:Vn1,126:Vn1,127:Vn1,128:Vn1,129:Vn1,134:Vn1,135:Vn1,136:Vn1,139:Vn1,140:Vn1},o([2,34],Vy),{22:[1,214],78:VA},o([2,38],Vy),{21:Vo1,40:215,43:Vo1,46:Vo1},{26:[1,216]},o([2,48],Ve1),o([2,141],VL),{7:217,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:V1,22:V2,23:V3,24:V4,25:27,28:V5,29:V6,30:V7,31:V8,32:V9,33:Va,35:Vb,38:Vc,49:Vd,51:35,52:39,53:40,54:41,55:42,56:43,57:33,58:Ve,61:Vf,62:29,63:30,64:31,79:32,80:34,82:38,84:45,86:56,89:62,91:65,94:66,99:67,100:68,101:Vg,102:Vh,103:69,107:71,108:Vi,109:Vj,110:Vk,111:Vl,112:Vm,113:70,114:72,125:Vn,126:Vo,127:Vp,128:Vq,129:Vr,130:52,131:53,132:54,133:55,134:Vs,135:Vt,136:Vu,137:58,138:59,139:Vv,140:Vw},{24:Vp1,26:Vp1,29:Vp1,34:218,49:Vp1,58:Vp1,61:Vp1,101:Vp1,102:Vp1,108:Vp1,109:Vp1,110:Vp1,111:Vp1,112:Vp1,125:Vp1,126:Vp1,127:Vp1,128:Vp1,129:Vp1,134:Vp1,135:Vp1,136:Vp1,139:Vp1,140:Vp1},{21:[1,219],41:220,42:221,43:Vq1,46:[1,222]},{8:224,19:V1},o([2,21],Vy),{24:V4,25:226,26:[1,225],29:VQ,49:Vd,51:35,52:39,53:40,54:41,55:42,56:43,57:33,58:Ve,61:Vf,62:29,63:30,64:31,79:32,80:34,82:38,84:45,86:56,89:62,91:65,94:66,99:67,100:68,101:Vg,102:Vh,103:69,107:71,108:Vi,109:Vj,110:Vk,111:Vl,112:Vm,113:70,114:72,125:Vn,126:Vo,127:Vp,128:Vq,129:Vr,130:52,131:53,132:54,133:55,134:Vs,135:Vt,136:Vu,137:58,138:59,139:Vv,140:Vw},o([2,39],Vy),{21:Vo1,40:227,43:Vo1},o([2,41],[21,43,46]),{45:[1,228]},{29:VQ,44:229,53:232,130:231,136:Vu,137:230,140:Vw},o([2,37],Vy),{7:233,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:V1,22:V2,23:V3,24:V4,25:27,28:V5,29:V6,30:V7,31:V8,32:V9,33:Va,35:Vb,38:Vc,49:Vd,51:35,52:39,53:40,54:41,55:42,56:43,57:33,58:Ve,61:Vf,62:29,63:30,64:31,79:32,80:34,82:38,84:45,86:56,89:62,91:65,94:66,99:67,100:68,101:Vg,102:Vh,103:69,107:71,108:Vi,109:Vj,110:Vk,111:Vl,112:Vm,113:70,114:72,125:Vn,126:Vo,127:Vp,128:Vq,129:Vr,130:52,131:53,132:54,133:55,134:Vs,135:Vt,136:Vu,137:58,138:59,139:Vv,140:Vw},{24:Vr1,26:Vr1,29:Vr1,49:Vr1,58:Vr1,61:Vr1,78:VA,101:Vr1,102:Vr1,108:Vr1,109:Vr1,110:Vr1,111:Vr1,112:Vr1,125:Vr1,126:Vr1,127:Vr1,128:Vr1,129:Vr1,134:Vr1,135:Vr1,136:Vr1,139:Vr1,140:Vr1},{21:[1,234],42:221,43:Vq1},{19:Vz,20:235,21:Vz,22:Vz,23:Vz,24:Vz,28:Vz,29:Vz,30:Vz,31:Vz,32:Vz,33:Vz,35:Vz,38:Vz,43:Vz,49:Vz,58:Vz,61:Vz,101:Vz,102:Vz,108:Vz,109:Vz,110:Vz,111:Vz,112:Vz,125:Vz,126:Vz,127:Vz,128:Vz,129:Vz,134:Vz,135:Vz,136:Vz,139:Vz,140:Vz},{45:[1,236]},{45:[2,151]},{45:[2,152]},{45:[2,153]},o([2,35],Vy),o([2,40],Vy),{7:153,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:V1,21:Vs1,22:V2,23:V3,24:V4,25:27,28:V5,29:V6,30:V7,31:V8,32:V9,33:Va,35:Vb,38:Vc,43:Vs1,49:Vd,51:35,52:39,53:40,54:41,55:42,56:43,57:33,58:Ve,61:Vf,62:29,63:30,64:31,79:32,80:34,82:38,84:45,86:56,89:62,91:65,94:66,99:67,100:68,101:Vg,102:Vh,103:69,107:71,108:Vi,109:Vj,110:Vk,111:Vl,112:Vm,113:70,114:72,125:Vn,126:Vo,127:Vp,128:Vq,129:Vr,130:52,131:53,132:54,133:55,134:Vs,135:Vt,136:Vu,137:58,138:59,139:Vv,140:Vw},{19:Vz,20:237,21:Vz,22:Vz,23:Vz,24:Vz,28:Vz,29:Vz,30:Vz,31:Vz,32:Vz,33:Vz,35:Vz,38:Vz,43:Vz,46:Vz,49:Vz,58:Vz,61:Vz,101:Vz,102:Vz,108:Vz,109:Vz,110:Vz,111:Vz,112:Vz,125:Vz,126:Vz,127:Vz,128:Vz,129:Vz,134:Vz,135:Vz,136:Vz,139:Vz,140:Vz},{7:153,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:V1,21:Vt1,22:V2,23:V3,24:V4,25:27,28:V5,29:V6,30:V7,31:V8,32:V9,33:Va,35:Vb,38:Vc,43:Vt1,46:Vt1,49:Vd,51:35,52:39,53:40,54:41,55:42,56:43,57:33,58:Ve,61:Vf,62:29,63:30,64:31,79:32,80:34,82:38,84:45,86:56,89:62,91:65,94:66,99:67,100:68,101:Vg,102:Vh,103:69,107:71,108:Vi,109:Vj,110:Vk,111:Vl,112:Vm,113:70,114:72,125:Vn,126:Vo,127:Vp,128:Vq,129:Vr,130:52,131:53,132:54,133:55,134:Vs,135:Vt,136:Vu,137:58,138:59,139:Vv,140:Vw}],
defaultActions: {3:[2,1],230:[2,151],231:[2,152],232:[2,153]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    function lex() {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};


/* Begin Parser Customization Methods */
var _originalParseMethod = parser.parse;

parser.parse = function(source, args) {
    parser.wasNewLine = false;
    parser.newLine = false;
    parser.restricted = false;

    return _originalParseMethod.call(this, source);
};

parser.parseError = function(str, hash) {
    //		alert(JSON.stringify(hash) + "\n\n\n" + parser.newLine + "\n" + parser.wasNewLine + "\n\n" + hash.expected.indexOf("';'"));
    if (!((hash.expected && hash.expected.indexOf("';'") >= 0) && (hash.token === "}" || hash.token === "EOF" || hash.token === "BR++" || hash.token === "BR--" || parser.newLine || parser.wasNewLine))) {
        throw new SyntaxError(str);
    }
};

function createSourceLocation(source, firstToken, lastToken) {
    return new SourceLocation(source, new Position(firstToken.first_line, firstToken.first_column), new Position(lastToken.last_line, lastToken.last_column));
}

/* Begin AST Node Constructors */
function ProgramNode(body, loc) {
    this.type = "Program";
    this.body = body;
    this.loc = loc;
}

function EmptyStatementNode(loc) {
    this.type = "EmptyStatement";
    this.loc = loc;
}

function BlockStatementNode(body, loc) {
    this.type = "BlockStatement";
    this.body = body;
    this.loc = loc;
}

function ExpressionStatementNode(expression, loc) {
    this.type = "ExpressionStatement";
    this.expression = expression;
    this.loc = loc;
}

function IfStatementNode(test, consequent, alternate, loc) {
    this.type = "IfStatement";
    this.test = test;
    this.consequent = consequent;
    this.alternate = alternate;
    this.loc = loc;
}

function LabeledStatementNode(label, body, loc) {
    this.type = "LabeledStatement";
    this.label = label;
    this.body = body;
    this.loc = loc;
}

function BreakStatementNode(label, loc) {
    this.type = "BreakStatement";
    this.label = label;
    this.loc = loc;
}

function ContinueStatementNode(label, loc) {
    this.type = "ContinueStatement";
    this.label = label;
    this.loc = loc;
}

function WithStatementNode(object, body, loc) {
    this.type = "WithStatement";
    this.object = object;
    this.body = body;
    this.loc = loc;
}

function SwitchStatementNode(discriminant, cases, loc) {
    this.type = "SwitchStatement";
    this.discriminant = discriminant;
    this.cases = cases;
    this.loc = loc;
}

function ReturnStatementNode(argument, loc) {
    this.type = "ReturnStatement";
    this.argument = argument;
    this.loc = loc;
}

function ThrowStatementNode(argument, loc) {
    this.type = "ThrowStatement";
    this.argument = argument;
    this.loc = loc;
}

function TryStatementNode(block, handlers, finalizer, loc) {
    this.type = "TryStatement";
    this.block = block;
    this.handlers = handlers; // Multiple catch clauses are SpiderMonkey specific
    this.finalizer = finalizer;
    this.loc = loc;
}

function WhileStatementNode(test, body, loc) {
    this.type = "WhileStatement";
    this.test = test;
    this.body = body;
    this.loc = loc;
}

function DoWhileStatementNode(body, test, loc) {
    this.type = "DoWhileStatement";
    this.body = body;
    this.test = test;
    this.loc = loc;
}

function ForStatementNode(init, test, update, body, loc) {
    this.type = "ForStatement";
    this.init = init;
    this.test = test;
    this.update = update;
    this.body = body;
    this.loc = loc;
}

function ForInStatementNode(left, right, body, loc) {
    this.type = "ForInStatement";
    this.left = left;
    this.right = right;
    this.body = body;
    this.loc = loc;
}

function DebugggerStatementNode(loc) {
    this.type = "DebuggerStatement";
    this.loc = loc;
}

function FunctionDeclarationNode(id, params, body, generator, expression, loc) {
    this.type = "FunctionDeclaration";
    this.id = id;
    this.params = params;
    this.body = body;
    this.generator = generator;
    this.expression = expression;
    this.loc = loc;
}

function VariableDeclarationNode(declarations, kind, loc) {
    this.type = "VariableDeclaration";
    this.declarations = declarations;
    this.kind = kind;
    this.loc = loc;
}

function VariableDeclaratorNode(id, init, loc) {
    this.type = "VariableDeclarator";
    this.id = id;
    this.init = init;
    this.loc = loc;
}

function ThisExpressionNode(loc) {
    this.type = "ThisExpression";
    this.loc = loc;
}

function ArrayExpressionNode(elements, loc) {
    this.type = "ArrayExpression";
    this.elements = elements;
    this.loc = loc;
}

function ConstantArrayLiteralNode(elements, loc) {
    this.type = "ConstantArrayLiteral";
    this.elements = elements;
    this.loc = loc;
}

function ObjectExpressionNode(properties, loc) {
    this.type = "ObjectExpression";
    this.properties = properties;
    this.loc = loc;
}

function FunctionExpressionNode(id, params, body, generator, expression, loc) {
    this.type = "FunctionExpression";
    this.id = id;
    this.params = params;
    this.body = body;
    this.generator = generator;
    this.expression = expression;
    this.loc = loc;
}

function SequenceExpressionNode(expressions, loc) {
    this.type = "SequenceExpression";
    this.expressions = expressions;
    this.loc = loc;
}

function UnaryExpressionNode(operator, prefix, argument, loc) {
    this.type = "UnaryExpression";
    this.operator = operator;
    this.prefix = prefix;
    this.argument = argument;
    this.loc = loc;
}

function BinaryExpressionNode(operator, left, right, loc) {
    this.type = "BinaryExpression";
    this.operator = operator;
    this.left = left;
    this.right = right;
    this.loc = loc;
}

function AssignmentExpressionNode(operator, left, right, loc) {
    this.type = "AssignmentExpression";
    this.operator = operator;
    this.left = left;
    this.right = right;
    this.loc = loc;
}

function UpdateExpressionNode(operator, argument, prefix, loc) {
    this.type = "UpdateExpression";
    this.operator = operator;
    this.argument = argument;
    this.prefix = prefix;
    this.loc = loc;
}

function LogicalExpressionNode(operator, left, right, loc) {
    this.type = "LogicalExpression";
    this.operator = operator;
    this.left = left;
    this.right = right;
    this.loc = loc;
}

function ConditionalExpressionNode(test, consequent, alternate, loc) {
    this.type = "ConditionalExpression";
    this.test = test;
    this.consequent = consequent;
    this.alternate = alternate;
    this.loc = loc;
}

function NewExpressionNode(callee, args, loc) {
    this.type = "NewExpression";
    this.callee = callee;
    this.arguments = args;
    this.loc = loc;
}

function CallExpressionNode(callee, args, loc) {
    this.type = "CallExpression";
    this.callee = callee;
    this.arguments = args;
    this.loc = loc;
}

function MemberExpressionNode(object, property, computed, loc) {
    this.type = "MemberExpression";
    this.object = object;
    this.property = property;
    this.computed = computed;
    this.loc = loc;
}

function SwitchCaseNode(test, consequent, loc) {
    this.type = "SwitchCase";
    this.test = test;
    this.consequent = consequent;
    this.loc = loc;
}

function CatchClauseNode(param, body, loc) {
    this.type = "CatchClause";
    this.param = param;
    this.guard = null; /* Firefox specific */
    this.body = body;
    this.loc = loc;
}

function IdentifierNode(name, loc) {
    this.type = "Identifier";
    this.name = name;
    this.loc = loc;
}

function LiteralNode(value, loc) {
    this.type = "Literal";
    this.value = value;
    this.loc = loc;
}

function SourceLocation(source, start, end) {
    this.source = source;
    this.start = start;
    this.end = end;
}

function Position(line, column) {
    this.line = line;
    this.column = column;
}

/* Expose the AST Node Constructors */
parser.ast = {};
parser.ast.ProgramNode = ProgramNode;
parser.ast.EmptyStatementNode = EmptyStatementNode;
parser.ast.BlockStatementNode = BlockStatementNode;
parser.ast.ExpressionStatementNode = ExpressionStatementNode;
parser.ast.IfStatementNode = IfStatementNode;
parser.ast.LabeledStatementNode = LabeledStatementNode;
parser.ast.BreakStatementNode = BreakStatementNode;
parser.ast.ContinueStatementNode = ContinueStatementNode;
parser.ast.WithStatementNode = WithStatementNode;
parser.ast.SwitchStatementNode = SwitchStatementNode;
parser.ast.ReturnStatementNode = ReturnStatementNode;
parser.ast.ThrowStatementNode = ThrowStatementNode;
parser.ast.TryStatementNode = TryStatementNode;
parser.ast.WhileStatementNode = WhileStatementNode;
parser.ast.DoWhileStatementNode = DoWhileStatementNode;
parser.ast.ForStatementNode = ForStatementNode;
parser.ast.ForInStatementNode = ForInStatementNode;
parser.ast.DebugggerStatementNode = DebugggerStatementNode;
parser.ast.FunctionDeclarationNode = FunctionDeclarationNode;
parser.ast.VariableDeclarationNode = VariableDeclarationNode;
parser.ast.VariableDeclaratorNode = VariableDeclaratorNode;
parser.ast.ThisExpressionNode = ThisExpressionNode;
parser.ast.ArrayExpressionNode = ArrayExpressionNode;
parser.ast.ObjectExpressionNode = ObjectExpressionNode;
parser.ast.FunctionExpressionNode = FunctionExpressionNode;
parser.ast.SequenceExpressionNode = SequenceExpressionNode;
parser.ast.UnaryExpressionNode = UnaryExpressionNode;
parser.ast.BinaryExpressionNode = BinaryExpressionNode;
parser.ast.AssignmentExpressionNode = AssignmentExpressionNode;
parser.ast.UpdateExpressionNode = UpdateExpressionNode;
parser.ast.LogicalExpressionNode = LogicalExpressionNode;
parser.ast.ConditionalExpressionNode = ConditionalExpressionNode;
parser.ast.NewExpressionNode = NewExpressionNode;
parser.ast.CallExpressionNode = CallExpressionNode;
parser.ast.MemberExpressionNode = MemberExpressionNode;
parser.ast.SwitchCaseNode = SwitchCaseNode;
parser.ast.CatchClauseNode = CatchClauseNode;
parser.ast.IdentifierNode = IdentifierNode;
parser.ast.LiteralNode = LiteralNode;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:this.begin('COMMENT');
break;
case 1:/* consume */
break;
case 2:this.begin('INITIAL');
break;
case 3:
                                    if (yy_.yytext.match(/\r|\n/)) {
                                        parser.newLine = true;
                                    }

                                    if (parser.restricted && parser.newLine) {
                                        this.unput(yy_.yytext);
                                        parser.restricted = false;
                                        return ";";
                                    }
                                
break;
case 4:
                                    if (yy_.yytext.match(/\r|\n/)) {
                                        parser.newLine = true;
                                    }

                                    if (parser.restricted && parser.newLine) {
                                        this.unput(yy_.yytext);
                                        parser.restricted = false;
                                        return ";";
                                    }
                                
break;
case 5:
                                    if (yy_.yytext.match(/\r|\n/)) {
                                        parser.newLine = true;
                                    }

                                    if (parser.restricted && parser.newLine) {
                                        this.unput(yy_.yytext);
                                        parser.restricted = false;
                                        return ";";
                                    }
                                
break;
case 6:parser.restricted = false; return 136;
break;
case 7:parser.restricted = false; return 136;
break;
case 8:parser.restricted = true; return 30
break;
case 9:return 43
break;
case 10:return 37
break;
case 11:parser.restricted = true; return 28
break;
case 12:return 46
break;
case 13:return 27
break;
case 14:parser.retricted = true; return 31 // like javascript return
break;
case 15:return 23
break;
case 16:return 33
break;
case 17:return 38
break;
case 18:return 35
break;
case 19:return 32
break;
case 20:return 49
break;
case 21:return 126
break;
case 22:return 125
break;
case 23:return 127
break;
case 24:parser.restricted = false; return 128 // like javascript this
break;
case 25:return 129
break;
case 26:parser.restricted = false; return 'TRUE'
break;
case 27:parser.restricted = false; return 'FALSE'
break;
case 28:parser.restricted = false; return 134
break;
case 29:parser.restricted = false; return 135
break;
case 30:return 116
break;
case 31:return 117
break;
case 32:return 118
break;
case 33:return 119
break;
case 34:return 120
break;
case 35:return 112
break;
case 36:parser.restricted = false; return 29
break;
case 37:parser.restricted = false; return 140
break;
case 38:parser.restricted = false; return 139
break;
case 39:return 122
break;
case 40:return 70
break;
case 41:return 71
break;
case 42:return 67
break;
case 43:return 68
break;
case 44:return 69
break;
case 45:parser.restricted = false; return 108
break;
case 46:parser.restricted = false; return 109
break;
case 47:return 83
break;
case 48:return 81
break;
case 49:return 87
break;
case 50:return 92
break;
case 51:return 93
break;
case 52:return 97
break;
case 53:return 98
break;
case 54:return 95
break;
case 55:return 96
break;
case 56:return 90
break;
case 57:return 85
break;
case 58:return 101
break;
case 59:return 102
break;
case 60:return 104
break;
case 61:return 105
break;
case 62:return 106
break;
case 63:return 61
break;
case 64:return 50
break;
case 65:parser.restricted = false; return 59
break;
case 66:return 60
break;
case 67:parser.restricted = false; return 24
break;
case 68:return 26
break;
case 69:parser.restricted = false; return 19
break;
case 70:return 21
break;
case 71:return 45
break;
case 72:parser.restricted = false; return 22
break;
case 73:return 78
break;
case 74:return 65
break;
case 75:parser.restricted = false; return 111
break;
case 76:parser.restricted = false; return 110
break;
case 77:return 5
break;
case 78:return 'ERROR'
break;
case 79:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\/\/)/,/^(?:[^\n]*)/,/^(?:\n)/,/^(?:\s+)/,/^(?:\/\*(.|\r|\n)*?\*\/)/,/^(?:\/\/.*($|\r\n|\r|\n))/,/^(?:(').*('))/,/^(?:(").*("))/,/^(?:break)/,/^(?:case)/,/^(?:catch)/,/^(?:continue)/,/^(?:default)/,/^(?:else)/,/^(?:end)/,/^(?:if)/,/^(?:for)/,/^(?:switch)/,/^(?:try)/,/^(?:while)/,/^(?:local)/,/^(?:level)/,/^(?:game)/,/^(?:parm)/,/^(?:self)/,/^(?:group)/,/^(?:true)/,/^(?:false)/,/^(?:NULL)/,/^(?:NIL)/,/^(?:thread)/,/^(?:waitthread)/,/^(?:exec)/,/^(?:waitexec)/,/^(?:waittill)/,/^(?:isalive)/,/^(?:(([$A-Za-z_])(([$A-Za-z_])|[0-9])*))/,/^(?:(-?(([1-9][0-9]+|[0-9]))+))/,/^(?:((-?(([1-9][0-9]+|[0-9]))+)+\.(([1-9][0-9]+|[0-9]))+))/,/^(?:::)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:%=)/,/^(?:\+\+)/,/^(?:--)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\^)/,/^(?:==)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:&)/,/^(?:\|)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\$)/,/^(?:\.)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?::)/,/^(?:;)/,/^(?:,)/,/^(?:=)/,/^(?:!)/,/^(?:~)/,/^(?:$)/,/^(?:.)/,/^(?:.)/],
conditions: {"COMMENT":{"rules":[1,2],"inclusive":false},"INITIAL":{"rules":[0,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79],"inclusive":true}}
});
/* Begin Lexer Customization Methods */
var _originalLexMethod = lexer.lex;

lexer.lex = function() {
    parser.wasNewLine = parser.newLine;
    parser.newLine = false;

    return _originalLexMethod.call(this);
};
/* End Lexer Customization Methods */;
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}